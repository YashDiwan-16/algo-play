/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"StakingGame","structs":{},"methods":[{"name":"init","args":[{"type":"byte[]","name":"gameId"},{"type":"account","name":"owner"},{"type":"uint64","name":"minStake"},{"type":"uint64","name":"maxPlayers"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"joinGame","args":[{"type":"uint64","name":"stakeAmount"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"startGame","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"endGame","args":[{"type":"account","name":"winner"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"claimRefund","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getGameId","args":[],"returns":{"type":"byte[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"getGameStatus","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"getMinStake","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"getMaxPlayers","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"getTotalStaked","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"getGameStartTime","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"getGameEndTime","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"getPlayerStake","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"isPlayerJoined","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"getPlayerIndex","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"getCurrentPlayerCount","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"emergencyWithdraw","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":7,"bytes":3},"local":{"ints":3,"bytes":0}},"keys":{"global":{"gameId":{"keyType":"AVMString","valueType":"AVMBytes","key":"Z2FtZUlk"},"owner":{"keyType":"AVMString","valueType":"address","key":"b3duZXI="},"gameStatus":{"keyType":"AVMString","valueType":"AVMUint64","key":"Z2FtZVN0YXR1cw=="},"minStake":{"keyType":"AVMString","valueType":"AVMUint64","key":"bWluU3Rha2U="},"maxPlayers":{"keyType":"AVMString","valueType":"AVMUint64","key":"bWF4UGxheWVycw=="},"totalStaked":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxTdGFrZWQ="},"winner":{"keyType":"AVMString","valueType":"address","key":"d2lubmVy"},"gameStartTime":{"keyType":"AVMString","valueType":"AVMUint64","key":"Z2FtZVN0YXJ0VGltZQ=="},"gameEndTime":{"keyType":"AVMString","valueType":"AVMUint64","key":"Z2FtZUVuZFRpbWU="},"initialized":{"keyType":"AVMString","valueType":"AVMUint64","key":"aW5pdGlhbGl6ZWQ="}},"local":{"playerStake":{"keyType":"AVMString","valueType":"AVMUint64","key":"cGxheWVyU3Rha2U="},"playerJoined":{"keyType":"AVMString","valueType":"AVMUint64","key":"cGxheWVySm9pbmVk"},"playerIndex":{"keyType":"AVMString","valueType":"AVMUint64","key":"cGxheWVySW5kZXg="}},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[1059],"errorMessage":"Can only withdraw in waiting state"},{"pc":[646,744,784,856,1044],"errorMessage":"Contract not initialized"},{"pc":[683],"errorMessage":"Game is full"},{"pc":[800],"errorMessage":"Game not active"},{"pc":[863],"errorMessage":"Game not finished"},{"pc":[652,759],"errorMessage":"Game not in waiting state"},{"pc":[765],"errorMessage":"Need at least 2 players to start"},{"pc":[891],"errorMessage":"No stake to refund"},{"pc":[287,299,316,333,350,367,384,401,418,435,452,469,493,505,523,535,551],"errorMessage":"OnCompletion is not NoOp"},{"pc":[1053],"errorMessage":"Only owner can emergency withdraw"},{"pc":[793],"errorMessage":"Only owner can end game"},{"pc":[753],"errorMessage":"Only owner can start game"},{"pc":[696],"errorMessage":"Payment amount mismatch"},{"pc":[706],"errorMessage":"Payment receiver mismatch"},{"pc":[671],"errorMessage":"Player already joined"},{"pc":[873],"errorMessage":"Player not in game"},{"pc":[661],"errorMessage":"Stake amount too low"},{"pc":[882],"errorMessage":"Winner cannot claim refund"},{"pc":[810],"errorMessage":"Winner must be a player"},{"pc":[704],"errorMessage":"application exists"},{"pc":[588],"errorMessage":"can only call when creating"},{"pc":[290,302,319,336,353,370,387,404,421,438,455,472,496,508,526,538,554],"errorMessage":"can only call when not creating"},{"pc":[643,650,657,679,730,741,751,757,781,791,797,827,835,853,860,880,929,934,940,946,951,957,963,997,1007,1012,1021,1030,1041,1051,1057,1063,1072,1076],"errorMessage":"check GlobalState exists"},{"pc":[668,807,870,889,971,979,987],"errorMessage":"check LocalState exists"},{"pc":[689],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiADAAECJg4EFR98dQt0b3RhbFN0YWtlZApnYW1lU3RhdHVzC2luaXRpYWxpemVkDHBsYXllckpvaW5lZAVvd25lcgptYXhQbGF5ZXJzCG1pblN0YWtlC3BsYXllclN0YWtlBndpbm5lcg1nYW1lU3RhcnRUaW1lC2dhbWVFbmRUaW1lC3BsYXllckluZGV4BmdhbWVJZDEbQQGoghEEMSTYrwQ9g5JfBDJ3rscE0BtqhwQEbX/2BHsdD9UEnZTk3QR96uPuBPWEix0E+hdYEARXtDEbBEV8YiMEgacFNQSD3PWNBCjaLBcEP77ThARe0iWJNhoAjhEBCgD6AO4A3ADQALgApwCWAIUAdABjAFIAQQAwAB8ADgACIkMxGRREMRhEiALoI0MxGRREMRhEiAKrFihMULAjQzEZFEQxGESIApIWKExQsCNDMRkURDEYRIgCeRYoTFCwI0MxGRREMRhEiAJgFihMULAjQzEZFEQxGESIAkkWKExQsCNDMRkURDEYRIgCMhYoTFCwI0MxGRREMRhEiAIcFihMULAjQzEZFEQxGESIAgUWKExQsCNDMRkURDEYRIgB7hYoTFCwI0MxGRREMRhEiAHYFihMULAjQzEZFEQxGESIAcFJFRZXBgJMUChMULAjQzEZFEQxGESIAV4jQzEZFEQxGEQ2GgEXwByIAQEjQzEZFEQxGESIANAjQzEZFEQxGEQ2GgEXiABbI0MxGRREMRhENhoBVwIANhoCF8AcNhoDFzYaBBeIAA0jQzEZQP7RMRgURCNDigQAJw2L/GcnBYv9ZycHi/5nJwaL/2cqImcpImcnCYv9ZycKImcnCyJnKyNniYoBACIrZUQjEkQiKmVEFEQiJwdlRIv/DkQxACInBGNEIxNEiAE6IicGZURLAQ1EIjgQIxJEIjgIi/8SRCI4BzEYcghEEkQxACcIi/9mMQAnBCNmMQAnDE8CZiIpZUSL/wgpTGeJIitlRCMSRDEAIicFZUQSRCIqZUQURIgA4iQPRCojZycKMQNniYoBACIrZUQjEkQxACInBWVEEkQiKmVEIxJEi/8iJwRjRCMSRCokZycJi/9nJwsxA2ciKWVEQQASsSIpZUSyCIv/sgcjshAisgGziSIrZUQjEkQiKmVEJBJEMQAiJwRjRCMSRDEAIicJZUQTRDEAIicIY0RJRDEAJwgiZjEAJwQiZjEAJwwiZrExALIHsggjshAisgGziSInDWVEiSIqZUSJIicHZUSJIicGZUSJIillRIkiJwplRIkiJwtlRIkxACInCGNEiTEAIicEY0SJMQAiJwxjRImKAAGAACIpZURAAAMiTIkiKWVEIicHZUQKSYwAIicGZUQNQQAHIicGZURMiYsAQv/5IitlRCMSRDEAIicFZUQSRCIqZUQURCIpZURBABixIicFZUQiKWVEsgiyByOyECKyAbMpImeJ","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the StakingGame contract
 */
export type StakingGameArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'init(byte[],account,uint64,uint64)void': {
      gameId: Uint8Array
      owner: Uint8Array | string
      minStake: bigint | number
      maxPlayers: bigint | number
    }
    'joinGame(uint64)void': {
      stakeAmount: bigint | number
    }
    'startGame()void': Record<string, never>
    'endGame(account)void': {
      winner: Uint8Array | string
    }
    'claimRefund()void': Record<string, never>
    'getGameId()byte[]': Record<string, never>
    'getGameStatus()uint64': Record<string, never>
    'getMinStake()uint64': Record<string, never>
    'getMaxPlayers()uint64': Record<string, never>
    'getTotalStaked()uint64': Record<string, never>
    'getGameStartTime()uint64': Record<string, never>
    'getGameEndTime()uint64': Record<string, never>
    'getPlayerStake()uint64': Record<string, never>
    'isPlayerJoined()uint64': Record<string, never>
    'getPlayerIndex()uint64': Record<string, never>
    'getCurrentPlayerCount()uint64': Record<string, never>
    'emergencyWithdraw()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'init(byte[],account,uint64,uint64)void': [gameId: Uint8Array, owner: Uint8Array | string, minStake: bigint | number, maxPlayers: bigint | number]
    'joinGame(uint64)void': [stakeAmount: bigint | number]
    'startGame()void': []
    'endGame(account)void': [winner: Uint8Array | string]
    'claimRefund()void': []
    'getGameId()byte[]': []
    'getGameStatus()uint64': []
    'getMinStake()uint64': []
    'getMaxPlayers()uint64': []
    'getTotalStaked()uint64': []
    'getGameStartTime()uint64': []
    'getGameEndTime()uint64': []
    'getPlayerStake()uint64': []
    'isPlayerJoined()uint64': []
    'getPlayerIndex()uint64': []
    'getCurrentPlayerCount()uint64': []
    'emergencyWithdraw()void': []
  }
}

/**
 * The return type for each method
 */
export type StakingGameReturns = {
  'init(byte[],account,uint64,uint64)void': void
  'joinGame(uint64)void': void
  'startGame()void': void
  'endGame(account)void': void
  'claimRefund()void': void
  'getGameId()byte[]': Uint8Array
  'getGameStatus()uint64': bigint
  'getMinStake()uint64': bigint
  'getMaxPlayers()uint64': bigint
  'getTotalStaked()uint64': bigint
  'getGameStartTime()uint64': bigint
  'getGameEndTime()uint64': bigint
  'getPlayerStake()uint64': bigint
  'isPlayerJoined()uint64': bigint
  'getPlayerIndex()uint64': bigint
  'getCurrentPlayerCount()uint64': bigint
  'emergencyWithdraw()void': void
}

/**
 * Defines the types of available calls and state of the StakingGame smart contract.
 */
export type StakingGameTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'init(byte[],account,uint64,uint64)void' | 'init', {
      argsObj: StakingGameArgs['obj']['init(byte[],account,uint64,uint64)void']
      argsTuple: StakingGameArgs['tuple']['init(byte[],account,uint64,uint64)void']
      returns: StakingGameReturns['init(byte[],account,uint64,uint64)void']
    }>
    & Record<'joinGame(uint64)void' | 'joinGame', {
      argsObj: StakingGameArgs['obj']['joinGame(uint64)void']
      argsTuple: StakingGameArgs['tuple']['joinGame(uint64)void']
      returns: StakingGameReturns['joinGame(uint64)void']
    }>
    & Record<'startGame()void' | 'startGame', {
      argsObj: StakingGameArgs['obj']['startGame()void']
      argsTuple: StakingGameArgs['tuple']['startGame()void']
      returns: StakingGameReturns['startGame()void']
    }>
    & Record<'endGame(account)void' | 'endGame', {
      argsObj: StakingGameArgs['obj']['endGame(account)void']
      argsTuple: StakingGameArgs['tuple']['endGame(account)void']
      returns: StakingGameReturns['endGame(account)void']
    }>
    & Record<'claimRefund()void' | 'claimRefund', {
      argsObj: StakingGameArgs['obj']['claimRefund()void']
      argsTuple: StakingGameArgs['tuple']['claimRefund()void']
      returns: StakingGameReturns['claimRefund()void']
    }>
    & Record<'getGameId()byte[]' | 'getGameId', {
      argsObj: StakingGameArgs['obj']['getGameId()byte[]']
      argsTuple: StakingGameArgs['tuple']['getGameId()byte[]']
      returns: StakingGameReturns['getGameId()byte[]']
    }>
    & Record<'getGameStatus()uint64' | 'getGameStatus', {
      argsObj: StakingGameArgs['obj']['getGameStatus()uint64']
      argsTuple: StakingGameArgs['tuple']['getGameStatus()uint64']
      returns: StakingGameReturns['getGameStatus()uint64']
    }>
    & Record<'getMinStake()uint64' | 'getMinStake', {
      argsObj: StakingGameArgs['obj']['getMinStake()uint64']
      argsTuple: StakingGameArgs['tuple']['getMinStake()uint64']
      returns: StakingGameReturns['getMinStake()uint64']
    }>
    & Record<'getMaxPlayers()uint64' | 'getMaxPlayers', {
      argsObj: StakingGameArgs['obj']['getMaxPlayers()uint64']
      argsTuple: StakingGameArgs['tuple']['getMaxPlayers()uint64']
      returns: StakingGameReturns['getMaxPlayers()uint64']
    }>
    & Record<'getTotalStaked()uint64' | 'getTotalStaked', {
      argsObj: StakingGameArgs['obj']['getTotalStaked()uint64']
      argsTuple: StakingGameArgs['tuple']['getTotalStaked()uint64']
      returns: StakingGameReturns['getTotalStaked()uint64']
    }>
    & Record<'getGameStartTime()uint64' | 'getGameStartTime', {
      argsObj: StakingGameArgs['obj']['getGameStartTime()uint64']
      argsTuple: StakingGameArgs['tuple']['getGameStartTime()uint64']
      returns: StakingGameReturns['getGameStartTime()uint64']
    }>
    & Record<'getGameEndTime()uint64' | 'getGameEndTime', {
      argsObj: StakingGameArgs['obj']['getGameEndTime()uint64']
      argsTuple: StakingGameArgs['tuple']['getGameEndTime()uint64']
      returns: StakingGameReturns['getGameEndTime()uint64']
    }>
    & Record<'getPlayerStake()uint64' | 'getPlayerStake', {
      argsObj: StakingGameArgs['obj']['getPlayerStake()uint64']
      argsTuple: StakingGameArgs['tuple']['getPlayerStake()uint64']
      returns: StakingGameReturns['getPlayerStake()uint64']
    }>
    & Record<'isPlayerJoined()uint64' | 'isPlayerJoined', {
      argsObj: StakingGameArgs['obj']['isPlayerJoined()uint64']
      argsTuple: StakingGameArgs['tuple']['isPlayerJoined()uint64']
      returns: StakingGameReturns['isPlayerJoined()uint64']
    }>
    & Record<'getPlayerIndex()uint64' | 'getPlayerIndex', {
      argsObj: StakingGameArgs['obj']['getPlayerIndex()uint64']
      argsTuple: StakingGameArgs['tuple']['getPlayerIndex()uint64']
      returns: StakingGameReturns['getPlayerIndex()uint64']
    }>
    & Record<'getCurrentPlayerCount()uint64' | 'getCurrentPlayerCount', {
      argsObj: StakingGameArgs['obj']['getCurrentPlayerCount()uint64']
      argsTuple: StakingGameArgs['tuple']['getCurrentPlayerCount()uint64']
      returns: StakingGameReturns['getCurrentPlayerCount()uint64']
    }>
    & Record<'emergencyWithdraw()void' | 'emergencyWithdraw', {
      argsObj: StakingGameArgs['obj']['emergencyWithdraw()void']
      argsTuple: StakingGameArgs['tuple']['emergencyWithdraw()void']
      returns: StakingGameReturns['emergencyWithdraw()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        gameId: BinaryState
        owner: string
        gameStatus: bigint
        minStake: bigint
        maxPlayers: bigint
        totalStaked: bigint
        winner: string
        gameStartTime: bigint
        gameEndTime: bigint
        initialized: bigint
      }
      maps: {}
    }
    local: {
      keys: {
        playerStake: bigint
        playerJoined: bigint
        playerIndex: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type StakingGameSignatures = keyof StakingGameTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type StakingGameNonVoidMethodSignatures = keyof StakingGameTypes['methods'] extends infer T ? T extends keyof StakingGameTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the StakingGame smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends StakingGameSignatures> = StakingGameTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the StakingGame smart contract to the method's return type
 */
export type MethodReturn<TSignature extends StakingGameSignatures> = StakingGameTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = StakingGameTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = StakingGameTypes['state']['local']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type StakingGameCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type StakingGameDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: StakingGameCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the StakingGame smart contract
 */
export abstract class StakingGameParamsFactory {
  /**
   * Constructs a no op call for the init(byte[],account,uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static init(params: CallParams<StakingGameArgs['obj']['init(byte[],account,uint64,uint64)void'] | StakingGameArgs['tuple']['init(byte[],account,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'init(byte[],account,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameId, params.args.owner, params.args.minStake, params.args.maxPlayers],
    }
  }
  /**
   * Constructs a no op call for the joinGame(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static joinGame(params: CallParams<StakingGameArgs['obj']['joinGame(uint64)void'] | StakingGameArgs['tuple']['joinGame(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'joinGame(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.stakeAmount],
    }
  }
  /**
   * Constructs a no op call for the startGame()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static startGame(params: CallParams<StakingGameArgs['obj']['startGame()void'] | StakingGameArgs['tuple']['startGame()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'startGame()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the endGame(account)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static endGame(params: CallParams<StakingGameArgs['obj']['endGame(account)void'] | StakingGameArgs['tuple']['endGame(account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'endGame(account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.winner],
    }
  }
  /**
   * Constructs a no op call for the claimRefund()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static claimRefund(params: CallParams<StakingGameArgs['obj']['claimRefund()void'] | StakingGameArgs['tuple']['claimRefund()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'claimRefund()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getGameId()byte[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getGameId(params: CallParams<StakingGameArgs['obj']['getGameId()byte[]'] | StakingGameArgs['tuple']['getGameId()byte[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getGameId()byte[]' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getGameStatus()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getGameStatus(params: CallParams<StakingGameArgs['obj']['getGameStatus()uint64'] | StakingGameArgs['tuple']['getGameStatus()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getGameStatus()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getMinStake()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getMinStake(params: CallParams<StakingGameArgs['obj']['getMinStake()uint64'] | StakingGameArgs['tuple']['getMinStake()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getMinStake()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getMaxPlayers()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getMaxPlayers(params: CallParams<StakingGameArgs['obj']['getMaxPlayers()uint64'] | StakingGameArgs['tuple']['getMaxPlayers()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getMaxPlayers()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getTotalStaked()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTotalStaked(params: CallParams<StakingGameArgs['obj']['getTotalStaked()uint64'] | StakingGameArgs['tuple']['getTotalStaked()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTotalStaked()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getGameStartTime()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getGameStartTime(params: CallParams<StakingGameArgs['obj']['getGameStartTime()uint64'] | StakingGameArgs['tuple']['getGameStartTime()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getGameStartTime()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getGameEndTime()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getGameEndTime(params: CallParams<StakingGameArgs['obj']['getGameEndTime()uint64'] | StakingGameArgs['tuple']['getGameEndTime()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getGameEndTime()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getPlayerStake()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPlayerStake(params: CallParams<StakingGameArgs['obj']['getPlayerStake()uint64'] | StakingGameArgs['tuple']['getPlayerStake()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPlayerStake()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the isPlayerJoined()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static isPlayerJoined(params: CallParams<StakingGameArgs['obj']['isPlayerJoined()uint64'] | StakingGameArgs['tuple']['isPlayerJoined()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'isPlayerJoined()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getPlayerIndex()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPlayerIndex(params: CallParams<StakingGameArgs['obj']['getPlayerIndex()uint64'] | StakingGameArgs['tuple']['getPlayerIndex()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPlayerIndex()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getCurrentPlayerCount()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getCurrentPlayerCount(params: CallParams<StakingGameArgs['obj']['getCurrentPlayerCount()uint64'] | StakingGameArgs['tuple']['getCurrentPlayerCount()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getCurrentPlayerCount()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the emergencyWithdraw()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static emergencyWithdraw(params: CallParams<StakingGameArgs['obj']['emergencyWithdraw()void'] | StakingGameArgs['tuple']['emergencyWithdraw()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'emergencyWithdraw()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the StakingGame smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class StakingGameFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `StakingGameFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new StakingGameClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new StakingGameClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the StakingGame smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: StakingGameDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new StakingGameClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the StakingGame smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the StakingGame smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the StakingGame smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new StakingGameClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the StakingGame smart contract
 */
export class StakingGameClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `StakingGameClient`
   *
   * @param appClient An `AppClient` instance which has been created with the StakingGame app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `StakingGameClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends StakingGameNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `StakingGameClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<StakingGameClient> {
    return new StakingGameClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `StakingGameClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<StakingGameClient> {
    return new StakingGameClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the StakingGame smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the StakingGame smart contract using the `init(byte[],account,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    init: (params: CallParams<StakingGameArgs['obj']['init(byte[],account,uint64,uint64)void'] | StakingGameArgs['tuple']['init(byte[],account,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StakingGameParamsFactory.init(params))
    },

    /**
     * Makes a call to the StakingGame smart contract using the `joinGame(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    joinGame: (params: CallParams<StakingGameArgs['obj']['joinGame(uint64)void'] | StakingGameArgs['tuple']['joinGame(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StakingGameParamsFactory.joinGame(params))
    },

    /**
     * Makes a call to the StakingGame smart contract using the `startGame()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    startGame: (params: CallParams<StakingGameArgs['obj']['startGame()void'] | StakingGameArgs['tuple']['startGame()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StakingGameParamsFactory.startGame(params))
    },

    /**
     * Makes a call to the StakingGame smart contract using the `endGame(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    endGame: (params: CallParams<StakingGameArgs['obj']['endGame(account)void'] | StakingGameArgs['tuple']['endGame(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StakingGameParamsFactory.endGame(params))
    },

    /**
     * Makes a call to the StakingGame smart contract using the `claimRefund()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    claimRefund: (params: CallParams<StakingGameArgs['obj']['claimRefund()void'] | StakingGameArgs['tuple']['claimRefund()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StakingGameParamsFactory.claimRefund(params))
    },

    /**
     * Makes a call to the StakingGame smart contract using the `getGameId()byte[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getGameId: (params: CallParams<StakingGameArgs['obj']['getGameId()byte[]'] | StakingGameArgs['tuple']['getGameId()byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StakingGameParamsFactory.getGameId(params))
    },

    /**
     * Makes a call to the StakingGame smart contract using the `getGameStatus()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getGameStatus: (params: CallParams<StakingGameArgs['obj']['getGameStatus()uint64'] | StakingGameArgs['tuple']['getGameStatus()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StakingGameParamsFactory.getGameStatus(params))
    },

    /**
     * Makes a call to the StakingGame smart contract using the `getMinStake()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getMinStake: (params: CallParams<StakingGameArgs['obj']['getMinStake()uint64'] | StakingGameArgs['tuple']['getMinStake()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StakingGameParamsFactory.getMinStake(params))
    },

    /**
     * Makes a call to the StakingGame smart contract using the `getMaxPlayers()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getMaxPlayers: (params: CallParams<StakingGameArgs['obj']['getMaxPlayers()uint64'] | StakingGameArgs['tuple']['getMaxPlayers()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StakingGameParamsFactory.getMaxPlayers(params))
    },

    /**
     * Makes a call to the StakingGame smart contract using the `getTotalStaked()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTotalStaked: (params: CallParams<StakingGameArgs['obj']['getTotalStaked()uint64'] | StakingGameArgs['tuple']['getTotalStaked()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StakingGameParamsFactory.getTotalStaked(params))
    },

    /**
     * Makes a call to the StakingGame smart contract using the `getGameStartTime()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getGameStartTime: (params: CallParams<StakingGameArgs['obj']['getGameStartTime()uint64'] | StakingGameArgs['tuple']['getGameStartTime()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StakingGameParamsFactory.getGameStartTime(params))
    },

    /**
     * Makes a call to the StakingGame smart contract using the `getGameEndTime()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getGameEndTime: (params: CallParams<StakingGameArgs['obj']['getGameEndTime()uint64'] | StakingGameArgs['tuple']['getGameEndTime()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StakingGameParamsFactory.getGameEndTime(params))
    },

    /**
     * Makes a call to the StakingGame smart contract using the `getPlayerStake()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPlayerStake: (params: CallParams<StakingGameArgs['obj']['getPlayerStake()uint64'] | StakingGameArgs['tuple']['getPlayerStake()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StakingGameParamsFactory.getPlayerStake(params))
    },

    /**
     * Makes a call to the StakingGame smart contract using the `isPlayerJoined()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    isPlayerJoined: (params: CallParams<StakingGameArgs['obj']['isPlayerJoined()uint64'] | StakingGameArgs['tuple']['isPlayerJoined()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StakingGameParamsFactory.isPlayerJoined(params))
    },

    /**
     * Makes a call to the StakingGame smart contract using the `getPlayerIndex()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPlayerIndex: (params: CallParams<StakingGameArgs['obj']['getPlayerIndex()uint64'] | StakingGameArgs['tuple']['getPlayerIndex()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StakingGameParamsFactory.getPlayerIndex(params))
    },

    /**
     * Makes a call to the StakingGame smart contract using the `getCurrentPlayerCount()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getCurrentPlayerCount: (params: CallParams<StakingGameArgs['obj']['getCurrentPlayerCount()uint64'] | StakingGameArgs['tuple']['getCurrentPlayerCount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StakingGameParamsFactory.getCurrentPlayerCount(params))
    },

    /**
     * Makes a call to the StakingGame smart contract using the `emergencyWithdraw()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    emergencyWithdraw: (params: CallParams<StakingGameArgs['obj']['emergencyWithdraw()void'] | StakingGameArgs['tuple']['emergencyWithdraw()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StakingGameParamsFactory.emergencyWithdraw(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the StakingGame smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the StakingGame smart contract using the `init(byte[],account,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    init: (params: CallParams<StakingGameArgs['obj']['init(byte[],account,uint64,uint64)void'] | StakingGameArgs['tuple']['init(byte[],account,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StakingGameParamsFactory.init(params))
    },

    /**
     * Makes a call to the StakingGame smart contract using the `joinGame(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    joinGame: (params: CallParams<StakingGameArgs['obj']['joinGame(uint64)void'] | StakingGameArgs['tuple']['joinGame(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StakingGameParamsFactory.joinGame(params))
    },

    /**
     * Makes a call to the StakingGame smart contract using the `startGame()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    startGame: (params: CallParams<StakingGameArgs['obj']['startGame()void'] | StakingGameArgs['tuple']['startGame()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StakingGameParamsFactory.startGame(params))
    },

    /**
     * Makes a call to the StakingGame smart contract using the `endGame(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    endGame: (params: CallParams<StakingGameArgs['obj']['endGame(account)void'] | StakingGameArgs['tuple']['endGame(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StakingGameParamsFactory.endGame(params))
    },

    /**
     * Makes a call to the StakingGame smart contract using the `claimRefund()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    claimRefund: (params: CallParams<StakingGameArgs['obj']['claimRefund()void'] | StakingGameArgs['tuple']['claimRefund()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StakingGameParamsFactory.claimRefund(params))
    },

    /**
     * Makes a call to the StakingGame smart contract using the `getGameId()byte[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getGameId: (params: CallParams<StakingGameArgs['obj']['getGameId()byte[]'] | StakingGameArgs['tuple']['getGameId()byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StakingGameParamsFactory.getGameId(params))
    },

    /**
     * Makes a call to the StakingGame smart contract using the `getGameStatus()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getGameStatus: (params: CallParams<StakingGameArgs['obj']['getGameStatus()uint64'] | StakingGameArgs['tuple']['getGameStatus()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StakingGameParamsFactory.getGameStatus(params))
    },

    /**
     * Makes a call to the StakingGame smart contract using the `getMinStake()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getMinStake: (params: CallParams<StakingGameArgs['obj']['getMinStake()uint64'] | StakingGameArgs['tuple']['getMinStake()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StakingGameParamsFactory.getMinStake(params))
    },

    /**
     * Makes a call to the StakingGame smart contract using the `getMaxPlayers()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getMaxPlayers: (params: CallParams<StakingGameArgs['obj']['getMaxPlayers()uint64'] | StakingGameArgs['tuple']['getMaxPlayers()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StakingGameParamsFactory.getMaxPlayers(params))
    },

    /**
     * Makes a call to the StakingGame smart contract using the `getTotalStaked()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTotalStaked: (params: CallParams<StakingGameArgs['obj']['getTotalStaked()uint64'] | StakingGameArgs['tuple']['getTotalStaked()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StakingGameParamsFactory.getTotalStaked(params))
    },

    /**
     * Makes a call to the StakingGame smart contract using the `getGameStartTime()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getGameStartTime: (params: CallParams<StakingGameArgs['obj']['getGameStartTime()uint64'] | StakingGameArgs['tuple']['getGameStartTime()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StakingGameParamsFactory.getGameStartTime(params))
    },

    /**
     * Makes a call to the StakingGame smart contract using the `getGameEndTime()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getGameEndTime: (params: CallParams<StakingGameArgs['obj']['getGameEndTime()uint64'] | StakingGameArgs['tuple']['getGameEndTime()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StakingGameParamsFactory.getGameEndTime(params))
    },

    /**
     * Makes a call to the StakingGame smart contract using the `getPlayerStake()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPlayerStake: (params: CallParams<StakingGameArgs['obj']['getPlayerStake()uint64'] | StakingGameArgs['tuple']['getPlayerStake()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StakingGameParamsFactory.getPlayerStake(params))
    },

    /**
     * Makes a call to the StakingGame smart contract using the `isPlayerJoined()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    isPlayerJoined: (params: CallParams<StakingGameArgs['obj']['isPlayerJoined()uint64'] | StakingGameArgs['tuple']['isPlayerJoined()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StakingGameParamsFactory.isPlayerJoined(params))
    },

    /**
     * Makes a call to the StakingGame smart contract using the `getPlayerIndex()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPlayerIndex: (params: CallParams<StakingGameArgs['obj']['getPlayerIndex()uint64'] | StakingGameArgs['tuple']['getPlayerIndex()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StakingGameParamsFactory.getPlayerIndex(params))
    },

    /**
     * Makes a call to the StakingGame smart contract using the `getCurrentPlayerCount()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getCurrentPlayerCount: (params: CallParams<StakingGameArgs['obj']['getCurrentPlayerCount()uint64'] | StakingGameArgs['tuple']['getCurrentPlayerCount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StakingGameParamsFactory.getCurrentPlayerCount(params))
    },

    /**
     * Makes a call to the StakingGame smart contract using the `emergencyWithdraw()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    emergencyWithdraw: (params: CallParams<StakingGameArgs['obj']['emergencyWithdraw()void'] | StakingGameArgs['tuple']['emergencyWithdraw()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StakingGameParamsFactory.emergencyWithdraw(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the StakingGame smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the StakingGame smart contract using the `init(byte[],account,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    init: async (params: CallParams<StakingGameArgs['obj']['init(byte[],account,uint64,uint64)void'] | StakingGameArgs['tuple']['init(byte[],account,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StakingGameParamsFactory.init(params))
      return {...result, return: result.return as unknown as (undefined | StakingGameReturns['init(byte[],account,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the StakingGame smart contract using the `joinGame(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    joinGame: async (params: CallParams<StakingGameArgs['obj']['joinGame(uint64)void'] | StakingGameArgs['tuple']['joinGame(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StakingGameParamsFactory.joinGame(params))
      return {...result, return: result.return as unknown as (undefined | StakingGameReturns['joinGame(uint64)void'])}
    },

    /**
     * Makes a call to the StakingGame smart contract using the `startGame()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    startGame: async (params: CallParams<StakingGameArgs['obj']['startGame()void'] | StakingGameArgs['tuple']['startGame()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StakingGameParamsFactory.startGame(params))
      return {...result, return: result.return as unknown as (undefined | StakingGameReturns['startGame()void'])}
    },

    /**
     * Makes a call to the StakingGame smart contract using the `endGame(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    endGame: async (params: CallParams<StakingGameArgs['obj']['endGame(account)void'] | StakingGameArgs['tuple']['endGame(account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StakingGameParamsFactory.endGame(params))
      return {...result, return: result.return as unknown as (undefined | StakingGameReturns['endGame(account)void'])}
    },

    /**
     * Makes a call to the StakingGame smart contract using the `claimRefund()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    claimRefund: async (params: CallParams<StakingGameArgs['obj']['claimRefund()void'] | StakingGameArgs['tuple']['claimRefund()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StakingGameParamsFactory.claimRefund(params))
      return {...result, return: result.return as unknown as (undefined | StakingGameReturns['claimRefund()void'])}
    },

    /**
     * Makes a call to the StakingGame smart contract using the `getGameId()byte[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getGameId: async (params: CallParams<StakingGameArgs['obj']['getGameId()byte[]'] | StakingGameArgs['tuple']['getGameId()byte[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StakingGameParamsFactory.getGameId(params))
      return {...result, return: result.return as unknown as (undefined | StakingGameReturns['getGameId()byte[]'])}
    },

    /**
     * Makes a call to the StakingGame smart contract using the `getGameStatus()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getGameStatus: async (params: CallParams<StakingGameArgs['obj']['getGameStatus()uint64'] | StakingGameArgs['tuple']['getGameStatus()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StakingGameParamsFactory.getGameStatus(params))
      return {...result, return: result.return as unknown as (undefined | StakingGameReturns['getGameStatus()uint64'])}
    },

    /**
     * Makes a call to the StakingGame smart contract using the `getMinStake()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getMinStake: async (params: CallParams<StakingGameArgs['obj']['getMinStake()uint64'] | StakingGameArgs['tuple']['getMinStake()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StakingGameParamsFactory.getMinStake(params))
      return {...result, return: result.return as unknown as (undefined | StakingGameReturns['getMinStake()uint64'])}
    },

    /**
     * Makes a call to the StakingGame smart contract using the `getMaxPlayers()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getMaxPlayers: async (params: CallParams<StakingGameArgs['obj']['getMaxPlayers()uint64'] | StakingGameArgs['tuple']['getMaxPlayers()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StakingGameParamsFactory.getMaxPlayers(params))
      return {...result, return: result.return as unknown as (undefined | StakingGameReturns['getMaxPlayers()uint64'])}
    },

    /**
     * Makes a call to the StakingGame smart contract using the `getTotalStaked()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTotalStaked: async (params: CallParams<StakingGameArgs['obj']['getTotalStaked()uint64'] | StakingGameArgs['tuple']['getTotalStaked()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StakingGameParamsFactory.getTotalStaked(params))
      return {...result, return: result.return as unknown as (undefined | StakingGameReturns['getTotalStaked()uint64'])}
    },

    /**
     * Makes a call to the StakingGame smart contract using the `getGameStartTime()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getGameStartTime: async (params: CallParams<StakingGameArgs['obj']['getGameStartTime()uint64'] | StakingGameArgs['tuple']['getGameStartTime()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StakingGameParamsFactory.getGameStartTime(params))
      return {...result, return: result.return as unknown as (undefined | StakingGameReturns['getGameStartTime()uint64'])}
    },

    /**
     * Makes a call to the StakingGame smart contract using the `getGameEndTime()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getGameEndTime: async (params: CallParams<StakingGameArgs['obj']['getGameEndTime()uint64'] | StakingGameArgs['tuple']['getGameEndTime()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StakingGameParamsFactory.getGameEndTime(params))
      return {...result, return: result.return as unknown as (undefined | StakingGameReturns['getGameEndTime()uint64'])}
    },

    /**
     * Makes a call to the StakingGame smart contract using the `getPlayerStake()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPlayerStake: async (params: CallParams<StakingGameArgs['obj']['getPlayerStake()uint64'] | StakingGameArgs['tuple']['getPlayerStake()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StakingGameParamsFactory.getPlayerStake(params))
      return {...result, return: result.return as unknown as (undefined | StakingGameReturns['getPlayerStake()uint64'])}
    },

    /**
     * Makes a call to the StakingGame smart contract using the `isPlayerJoined()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    isPlayerJoined: async (params: CallParams<StakingGameArgs['obj']['isPlayerJoined()uint64'] | StakingGameArgs['tuple']['isPlayerJoined()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StakingGameParamsFactory.isPlayerJoined(params))
      return {...result, return: result.return as unknown as (undefined | StakingGameReturns['isPlayerJoined()uint64'])}
    },

    /**
     * Makes a call to the StakingGame smart contract using the `getPlayerIndex()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPlayerIndex: async (params: CallParams<StakingGameArgs['obj']['getPlayerIndex()uint64'] | StakingGameArgs['tuple']['getPlayerIndex()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StakingGameParamsFactory.getPlayerIndex(params))
      return {...result, return: result.return as unknown as (undefined | StakingGameReturns['getPlayerIndex()uint64'])}
    },

    /**
     * Makes a call to the StakingGame smart contract using the `getCurrentPlayerCount()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getCurrentPlayerCount: async (params: CallParams<StakingGameArgs['obj']['getCurrentPlayerCount()uint64'] | StakingGameArgs['tuple']['getCurrentPlayerCount()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StakingGameParamsFactory.getCurrentPlayerCount(params))
      return {...result, return: result.return as unknown as (undefined | StakingGameReturns['getCurrentPlayerCount()uint64'])}
    },

    /**
     * Makes a call to the StakingGame smart contract using the `emergencyWithdraw()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    emergencyWithdraw: async (params: CallParams<StakingGameArgs['obj']['emergencyWithdraw()void'] | StakingGameArgs['tuple']['emergencyWithdraw()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StakingGameParamsFactory.emergencyWithdraw(params))
      return {...result, return: result.return as unknown as (undefined | StakingGameReturns['emergencyWithdraw()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new StakingGameClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the StakingGame smart contract using the `getGameId()byte[]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getGameId(params: CallParams<StakingGameArgs['obj']['getGameId()byte[]'] | StakingGameArgs['tuple']['getGameId()byte[]']> = {args: []}) {
    const result = await this.appClient.send.call(StakingGameParamsFactory.getGameId(params))
    return result.return as unknown as StakingGameReturns['getGameId()byte[]']
  }

  /**
   * Makes a readonly (simulated) call to the StakingGame smart contract using the `getGameStatus()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getGameStatus(params: CallParams<StakingGameArgs['obj']['getGameStatus()uint64'] | StakingGameArgs['tuple']['getGameStatus()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(StakingGameParamsFactory.getGameStatus(params))
    return result.return as unknown as StakingGameReturns['getGameStatus()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the StakingGame smart contract using the `getMinStake()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getMinStake(params: CallParams<StakingGameArgs['obj']['getMinStake()uint64'] | StakingGameArgs['tuple']['getMinStake()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(StakingGameParamsFactory.getMinStake(params))
    return result.return as unknown as StakingGameReturns['getMinStake()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the StakingGame smart contract using the `getMaxPlayers()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getMaxPlayers(params: CallParams<StakingGameArgs['obj']['getMaxPlayers()uint64'] | StakingGameArgs['tuple']['getMaxPlayers()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(StakingGameParamsFactory.getMaxPlayers(params))
    return result.return as unknown as StakingGameReturns['getMaxPlayers()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the StakingGame smart contract using the `getTotalStaked()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getTotalStaked(params: CallParams<StakingGameArgs['obj']['getTotalStaked()uint64'] | StakingGameArgs['tuple']['getTotalStaked()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(StakingGameParamsFactory.getTotalStaked(params))
    return result.return as unknown as StakingGameReturns['getTotalStaked()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the StakingGame smart contract using the `getGameStartTime()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getGameStartTime(params: CallParams<StakingGameArgs['obj']['getGameStartTime()uint64'] | StakingGameArgs['tuple']['getGameStartTime()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(StakingGameParamsFactory.getGameStartTime(params))
    return result.return as unknown as StakingGameReturns['getGameStartTime()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the StakingGame smart contract using the `getGameEndTime()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getGameEndTime(params: CallParams<StakingGameArgs['obj']['getGameEndTime()uint64'] | StakingGameArgs['tuple']['getGameEndTime()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(StakingGameParamsFactory.getGameEndTime(params))
    return result.return as unknown as StakingGameReturns['getGameEndTime()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the StakingGame smart contract using the `getPlayerStake()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getPlayerStake(params: CallParams<StakingGameArgs['obj']['getPlayerStake()uint64'] | StakingGameArgs['tuple']['getPlayerStake()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(StakingGameParamsFactory.getPlayerStake(params))
    return result.return as unknown as StakingGameReturns['getPlayerStake()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the StakingGame smart contract using the `isPlayerJoined()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async isPlayerJoined(params: CallParams<StakingGameArgs['obj']['isPlayerJoined()uint64'] | StakingGameArgs['tuple']['isPlayerJoined()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(StakingGameParamsFactory.isPlayerJoined(params))
    return result.return as unknown as StakingGameReturns['isPlayerJoined()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the StakingGame smart contract using the `getPlayerIndex()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getPlayerIndex(params: CallParams<StakingGameArgs['obj']['getPlayerIndex()uint64'] | StakingGameArgs['tuple']['getPlayerIndex()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(StakingGameParamsFactory.getPlayerIndex(params))
    return result.return as unknown as StakingGameReturns['getPlayerIndex()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the StakingGame smart contract using the `getCurrentPlayerCount()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getCurrentPlayerCount(params: CallParams<StakingGameArgs['obj']['getCurrentPlayerCount()uint64'] | StakingGameArgs['tuple']['getCurrentPlayerCount()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(StakingGameParamsFactory.getCurrentPlayerCount(params))
    return result.return as unknown as StakingGameReturns['getCurrentPlayerCount()uint64']
  }

  /**
   * Methods to access state for the current StakingGame app
   */
  state = {
    /**
     * Methods to access global state for the current StakingGame app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          gameId: new BinaryStateValue(result.gameId),
          owner: result.owner,
          gameStatus: result.gameStatus,
          minStake: result.minStake,
          maxPlayers: result.maxPlayers,
          totalStaked: result.totalStaked,
          winner: result.winner,
          gameStartTime: result.gameStartTime,
          gameEndTime: result.gameEndTime,
          initialized: result.initialized,
        }
      },
      /**
       * Get the current value of the gameId key in global state
       */
      gameId: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("gameId")) as Uint8Array | undefined) },
      /**
       * Get the current value of the owner key in global state
       */
      owner: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("owner")) as string | undefined },
      /**
       * Get the current value of the gameStatus key in global state
       */
      gameStatus: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("gameStatus")) as bigint | undefined },
      /**
       * Get the current value of the minStake key in global state
       */
      minStake: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("minStake")) as bigint | undefined },
      /**
       * Get the current value of the maxPlayers key in global state
       */
      maxPlayers: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("maxPlayers")) as bigint | undefined },
      /**
       * Get the current value of the totalStaked key in global state
       */
      totalStaked: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalStaked")) as bigint | undefined },
      /**
       * Get the current value of the winner key in global state
       */
      winner: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("winner")) as string | undefined },
      /**
       * Get the current value of the gameStartTime key in global state
       */
      gameStartTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("gameStartTime")) as bigint | undefined },
      /**
       * Get the current value of the gameEndTime key in global state
       */
      gameEndTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("gameEndTime")) as bigint | undefined },
      /**
       * Get the current value of the initialized key in global state
       */
      initialized: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("initialized")) as bigint | undefined },
    },
    /**
     * Methods to access local state for the current StakingGame app
     */
    local: (address: string | Address) => {
      const encodedAddress = typeof address === 'string' ? address : encodeAddress(address.publicKey)
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state.local(encodedAddress).getAll()
          return {
            playerStake: result.playerStake,
            playerJoined: result.playerJoined,
            playerIndex: result.playerIndex,
          }
        },
        /**
         * Get the current value of the playerStake key in local state
         */
        playerStake: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("playerStake")) as bigint | undefined },
        /**
         * Get the current value of the playerJoined key in local state
         */
        playerJoined: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("playerJoined")) as bigint | undefined },
        /**
         * Get the current value of the playerIndex key in local state
         */
        playerIndex: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("playerIndex")) as bigint | undefined },
      }
    },
  }

  public newGroup(): StakingGameComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a init(byte[],account,uint64,uint64)void method call against the StakingGame contract
       */
      init(params: CallParams<StakingGameArgs['obj']['init(byte[],account,uint64,uint64)void'] | StakingGameArgs['tuple']['init(byte[],account,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.init(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a joinGame(uint64)void method call against the StakingGame contract
       */
      joinGame(params: CallParams<StakingGameArgs['obj']['joinGame(uint64)void'] | StakingGameArgs['tuple']['joinGame(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.joinGame(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a startGame()void method call against the StakingGame contract
       */
      startGame(params: CallParams<StakingGameArgs['obj']['startGame()void'] | StakingGameArgs['tuple']['startGame()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.startGame(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a endGame(account)void method call against the StakingGame contract
       */
      endGame(params: CallParams<StakingGameArgs['obj']['endGame(account)void'] | StakingGameArgs['tuple']['endGame(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.endGame(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a claimRefund()void method call against the StakingGame contract
       */
      claimRefund(params: CallParams<StakingGameArgs['obj']['claimRefund()void'] | StakingGameArgs['tuple']['claimRefund()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.claimRefund(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getGameId()byte[] method call against the StakingGame contract
       */
      getGameId(params: CallParams<StakingGameArgs['obj']['getGameId()byte[]'] | StakingGameArgs['tuple']['getGameId()byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getGameId(params)))
        resultMappers.push((v) => client.decodeReturnValue('getGameId()byte[]', v))
        return this
      },
      /**
       * Add a getGameStatus()uint64 method call against the StakingGame contract
       */
      getGameStatus(params: CallParams<StakingGameArgs['obj']['getGameStatus()uint64'] | StakingGameArgs['tuple']['getGameStatus()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getGameStatus(params)))
        resultMappers.push((v) => client.decodeReturnValue('getGameStatus()uint64', v))
        return this
      },
      /**
       * Add a getMinStake()uint64 method call against the StakingGame contract
       */
      getMinStake(params: CallParams<StakingGameArgs['obj']['getMinStake()uint64'] | StakingGameArgs['tuple']['getMinStake()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getMinStake(params)))
        resultMappers.push((v) => client.decodeReturnValue('getMinStake()uint64', v))
        return this
      },
      /**
       * Add a getMaxPlayers()uint64 method call against the StakingGame contract
       */
      getMaxPlayers(params: CallParams<StakingGameArgs['obj']['getMaxPlayers()uint64'] | StakingGameArgs['tuple']['getMaxPlayers()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getMaxPlayers(params)))
        resultMappers.push((v) => client.decodeReturnValue('getMaxPlayers()uint64', v))
        return this
      },
      /**
       * Add a getTotalStaked()uint64 method call against the StakingGame contract
       */
      getTotalStaked(params: CallParams<StakingGameArgs['obj']['getTotalStaked()uint64'] | StakingGameArgs['tuple']['getTotalStaked()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTotalStaked(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTotalStaked()uint64', v))
        return this
      },
      /**
       * Add a getGameStartTime()uint64 method call against the StakingGame contract
       */
      getGameStartTime(params: CallParams<StakingGameArgs['obj']['getGameStartTime()uint64'] | StakingGameArgs['tuple']['getGameStartTime()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getGameStartTime(params)))
        resultMappers.push((v) => client.decodeReturnValue('getGameStartTime()uint64', v))
        return this
      },
      /**
       * Add a getGameEndTime()uint64 method call against the StakingGame contract
       */
      getGameEndTime(params: CallParams<StakingGameArgs['obj']['getGameEndTime()uint64'] | StakingGameArgs['tuple']['getGameEndTime()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getGameEndTime(params)))
        resultMappers.push((v) => client.decodeReturnValue('getGameEndTime()uint64', v))
        return this
      },
      /**
       * Add a getPlayerStake()uint64 method call against the StakingGame contract
       */
      getPlayerStake(params: CallParams<StakingGameArgs['obj']['getPlayerStake()uint64'] | StakingGameArgs['tuple']['getPlayerStake()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPlayerStake(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPlayerStake()uint64', v))
        return this
      },
      /**
       * Add a isPlayerJoined()uint64 method call against the StakingGame contract
       */
      isPlayerJoined(params: CallParams<StakingGameArgs['obj']['isPlayerJoined()uint64'] | StakingGameArgs['tuple']['isPlayerJoined()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.isPlayerJoined(params)))
        resultMappers.push((v) => client.decodeReturnValue('isPlayerJoined()uint64', v))
        return this
      },
      /**
       * Add a getPlayerIndex()uint64 method call against the StakingGame contract
       */
      getPlayerIndex(params: CallParams<StakingGameArgs['obj']['getPlayerIndex()uint64'] | StakingGameArgs['tuple']['getPlayerIndex()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPlayerIndex(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPlayerIndex()uint64', v))
        return this
      },
      /**
       * Add a getCurrentPlayerCount()uint64 method call against the StakingGame contract
       */
      getCurrentPlayerCount(params: CallParams<StakingGameArgs['obj']['getCurrentPlayerCount()uint64'] | StakingGameArgs['tuple']['getCurrentPlayerCount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getCurrentPlayerCount(params)))
        resultMappers.push((v) => client.decodeReturnValue('getCurrentPlayerCount()uint64', v))
        return this
      },
      /**
       * Add a emergencyWithdraw()void method call against the StakingGame contract
       */
      emergencyWithdraw(params: CallParams<StakingGameArgs['obj']['emergencyWithdraw()void'] | StakingGameArgs['tuple']['emergencyWithdraw()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.emergencyWithdraw(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the StakingGame contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as StakingGameComposer
  }
}
export type StakingGameComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the init(byte[],account,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  init(params?: CallParams<StakingGameArgs['obj']['init(byte[],account,uint64,uint64)void'] | StakingGameArgs['tuple']['init(byte[],account,uint64,uint64)void']>): StakingGameComposer<[...TReturns, StakingGameReturns['init(byte[],account,uint64,uint64)void'] | undefined]>

  /**
   * Calls the joinGame(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  joinGame(params?: CallParams<StakingGameArgs['obj']['joinGame(uint64)void'] | StakingGameArgs['tuple']['joinGame(uint64)void']>): StakingGameComposer<[...TReturns, StakingGameReturns['joinGame(uint64)void'] | undefined]>

  /**
   * Calls the startGame()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  startGame(params?: CallParams<StakingGameArgs['obj']['startGame()void'] | StakingGameArgs['tuple']['startGame()void']>): StakingGameComposer<[...TReturns, StakingGameReturns['startGame()void'] | undefined]>

  /**
   * Calls the endGame(account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  endGame(params?: CallParams<StakingGameArgs['obj']['endGame(account)void'] | StakingGameArgs['tuple']['endGame(account)void']>): StakingGameComposer<[...TReturns, StakingGameReturns['endGame(account)void'] | undefined]>

  /**
   * Calls the claimRefund()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimRefund(params?: CallParams<StakingGameArgs['obj']['claimRefund()void'] | StakingGameArgs['tuple']['claimRefund()void']>): StakingGameComposer<[...TReturns, StakingGameReturns['claimRefund()void'] | undefined]>

  /**
   * Calls the getGameId()byte[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getGameId(params?: CallParams<StakingGameArgs['obj']['getGameId()byte[]'] | StakingGameArgs['tuple']['getGameId()byte[]']>): StakingGameComposer<[...TReturns, StakingGameReturns['getGameId()byte[]'] | undefined]>

  /**
   * Calls the getGameStatus()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getGameStatus(params?: CallParams<StakingGameArgs['obj']['getGameStatus()uint64'] | StakingGameArgs['tuple']['getGameStatus()uint64']>): StakingGameComposer<[...TReturns, StakingGameReturns['getGameStatus()uint64'] | undefined]>

  /**
   * Calls the getMinStake()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getMinStake(params?: CallParams<StakingGameArgs['obj']['getMinStake()uint64'] | StakingGameArgs['tuple']['getMinStake()uint64']>): StakingGameComposer<[...TReturns, StakingGameReturns['getMinStake()uint64'] | undefined]>

  /**
   * Calls the getMaxPlayers()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getMaxPlayers(params?: CallParams<StakingGameArgs['obj']['getMaxPlayers()uint64'] | StakingGameArgs['tuple']['getMaxPlayers()uint64']>): StakingGameComposer<[...TReturns, StakingGameReturns['getMaxPlayers()uint64'] | undefined]>

  /**
   * Calls the getTotalStaked()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTotalStaked(params?: CallParams<StakingGameArgs['obj']['getTotalStaked()uint64'] | StakingGameArgs['tuple']['getTotalStaked()uint64']>): StakingGameComposer<[...TReturns, StakingGameReturns['getTotalStaked()uint64'] | undefined]>

  /**
   * Calls the getGameStartTime()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getGameStartTime(params?: CallParams<StakingGameArgs['obj']['getGameStartTime()uint64'] | StakingGameArgs['tuple']['getGameStartTime()uint64']>): StakingGameComposer<[...TReturns, StakingGameReturns['getGameStartTime()uint64'] | undefined]>

  /**
   * Calls the getGameEndTime()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getGameEndTime(params?: CallParams<StakingGameArgs['obj']['getGameEndTime()uint64'] | StakingGameArgs['tuple']['getGameEndTime()uint64']>): StakingGameComposer<[...TReturns, StakingGameReturns['getGameEndTime()uint64'] | undefined]>

  /**
   * Calls the getPlayerStake()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPlayerStake(params?: CallParams<StakingGameArgs['obj']['getPlayerStake()uint64'] | StakingGameArgs['tuple']['getPlayerStake()uint64']>): StakingGameComposer<[...TReturns, StakingGameReturns['getPlayerStake()uint64'] | undefined]>

  /**
   * Calls the isPlayerJoined()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  isPlayerJoined(params?: CallParams<StakingGameArgs['obj']['isPlayerJoined()uint64'] | StakingGameArgs['tuple']['isPlayerJoined()uint64']>): StakingGameComposer<[...TReturns, StakingGameReturns['isPlayerJoined()uint64'] | undefined]>

  /**
   * Calls the getPlayerIndex()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPlayerIndex(params?: CallParams<StakingGameArgs['obj']['getPlayerIndex()uint64'] | StakingGameArgs['tuple']['getPlayerIndex()uint64']>): StakingGameComposer<[...TReturns, StakingGameReturns['getPlayerIndex()uint64'] | undefined]>

  /**
   * Calls the getCurrentPlayerCount()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getCurrentPlayerCount(params?: CallParams<StakingGameArgs['obj']['getCurrentPlayerCount()uint64'] | StakingGameArgs['tuple']['getCurrentPlayerCount()uint64']>): StakingGameComposer<[...TReturns, StakingGameReturns['getCurrentPlayerCount()uint64'] | undefined]>

  /**
   * Calls the emergencyWithdraw()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  emergencyWithdraw(params?: CallParams<StakingGameArgs['obj']['emergencyWithdraw()void'] | StakingGameArgs['tuple']['emergencyWithdraw()void']>): StakingGameComposer<[...TReturns, StakingGameReturns['emergencyWithdraw()void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the StakingGame smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): StakingGameComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): StakingGameComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<StakingGameComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<StakingGameComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<StakingGameComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<StakingGameComposerResults<TReturns>>
}
export type StakingGameComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

