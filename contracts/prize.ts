/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"Prize","structs":{},"methods":[{"name":"init","args":[{"type":"byte[]","name":"gameCid"},{"type":"account","name":"owner"},{"type":"uint64","name":"rewardPer100"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"recordPlay","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getPending","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"fundPool","args":[{"type":"uint64","name":"paymentAmount"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getPoolBalance","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"claimRewards","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":5,"bytes":2},"local":{"ints":0,"bytes":0}},"keys":{"global":{"gameCid":{"keyType":"AVMString","valueType":"AVMBytes","key":"Z2FtZUNpZA=="},"owner":{"keyType":"AVMString","valueType":"address","key":"b3duZXI="},"rewardPer100":{"keyType":"AVMString","valueType":"AVMUint64","key":"cmV3YXJkUGVyMTAw"},"playsSinceLastReward":{"keyType":"AVMString","valueType":"AVMUint64","key":"cGxheXNTaW5jZUxhc3RSZXdhcmQ="},"pendingOwner":{"keyType":"AVMString","valueType":"AVMUint64","key":"cGVuZGluZ093bmVy"},"totalPool":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxQb29s"},"initialized":{"keyType":"AVMString","valueType":"AVMUint64","key":"aW5pdGlhbGl6ZWQ="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[415],"errorMessage":"Not enough pool"},{"pc":[301,358,392],"errorMessage":"Not initialized"},{"pc":[407],"errorMessage":"Nothing to claim"},{"pc":[147,159,177,193,211,223],"errorMessage":"OnCompletion is not NoOp"},{"pc":[401],"errorMessage":"Only owner can claim"},{"pc":[371],"errorMessage":"Payment mismatch"},{"pc":[256],"errorMessage":"can only call when creating"},{"pc":[150,162,180,196,214,226],"errorMessage":"can only call when not creating"},{"pc":[300,305,314,323,328,336,349,357,375,386,391,399,405,411,421,438],"errorMessage":"check GlobalState exists"},{"pc":[364],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiADAAFkJgcJdG90YWxQb29sFHBsYXlzU2luY2VMYXN0UmV3YXJkDHBlbmRpbmdPd25lcgtpbml0aWFsaXplZAVvd25lcgQVH3x1DHJld2FyZFBlcjEwMDEbQQCbggYE+PGtzgRh0A0rBJsYocsE9iIWQgQFrglOBKWua9E2GgCOBgBOAEIAMAAgAA4AAiJDMRkURDEYRIgA6iNDMRkURDEYRIgA2RYnBUxQsCNDMRkURDEYRDYaAReIAKMjQzEZFEQxGESIAJIWJwVMULAjQzEZFEQxGESIAE8jQzEZFEQxGEQ2GgFXAgA2GgIXwBw2GgMXiAANI0MxGUD/kTEYFEQjQ4oDAIAHZ2FtZUNpZIv9ZycEi/5nJwaL/2cpImcqImcoImcrI2eJIitlREQiKWVEIwgpTGciKWVEJA9BABkiKmVEIicGZUQIKkxnIillRCQJKUxnQv/eiSIqZUSJigEAIitlREQiOBAjEkQiOAiL/xJEIihlRIv/CChMZ4kiKGVEiSIrZUREMQAiJwRlRBJEIiplRElEIihlREsBD0SxIicEZURLAbIIsgcjshAisgGzIihlREwJKExnKiJniQ==","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Prize contract
 */
export type PrizeArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'init(byte[],account,uint64)void': {
      gameCid: Uint8Array
      owner: Uint8Array | string
      rewardPer100: bigint | number
    }
    'recordPlay()void': Record<string, never>
    'getPending()uint64': Record<string, never>
    'fundPool(uint64)void': {
      paymentAmount: bigint | number
    }
    'getPoolBalance()uint64': Record<string, never>
    'claimRewards()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'init(byte[],account,uint64)void': [gameCid: Uint8Array, owner: Uint8Array | string, rewardPer100: bigint | number]
    'recordPlay()void': []
    'getPending()uint64': []
    'fundPool(uint64)void': [paymentAmount: bigint | number]
    'getPoolBalance()uint64': []
    'claimRewards()void': []
  }
}

/**
 * The return type for each method
 */
export type PrizeReturns = {
  'init(byte[],account,uint64)void': void
  'recordPlay()void': void
  'getPending()uint64': bigint
  'fundPool(uint64)void': void
  'getPoolBalance()uint64': bigint
  'claimRewards()void': void
}

/**
 * Defines the types of available calls and state of the Prize smart contract.
 */
export type PrizeTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'init(byte[],account,uint64)void' | 'init', {
      argsObj: PrizeArgs['obj']['init(byte[],account,uint64)void']
      argsTuple: PrizeArgs['tuple']['init(byte[],account,uint64)void']
      returns: PrizeReturns['init(byte[],account,uint64)void']
    }>
    & Record<'recordPlay()void' | 'recordPlay', {
      argsObj: PrizeArgs['obj']['recordPlay()void']
      argsTuple: PrizeArgs['tuple']['recordPlay()void']
      returns: PrizeReturns['recordPlay()void']
    }>
    & Record<'getPending()uint64' | 'getPending', {
      argsObj: PrizeArgs['obj']['getPending()uint64']
      argsTuple: PrizeArgs['tuple']['getPending()uint64']
      returns: PrizeReturns['getPending()uint64']
    }>
    & Record<'fundPool(uint64)void' | 'fundPool', {
      argsObj: PrizeArgs['obj']['fundPool(uint64)void']
      argsTuple: PrizeArgs['tuple']['fundPool(uint64)void']
      returns: PrizeReturns['fundPool(uint64)void']
    }>
    & Record<'getPoolBalance()uint64' | 'getPoolBalance', {
      argsObj: PrizeArgs['obj']['getPoolBalance()uint64']
      argsTuple: PrizeArgs['tuple']['getPoolBalance()uint64']
      returns: PrizeReturns['getPoolBalance()uint64']
    }>
    & Record<'claimRewards()void' | 'claimRewards', {
      argsObj: PrizeArgs['obj']['claimRewards()void']
      argsTuple: PrizeArgs['tuple']['claimRewards()void']
      returns: PrizeReturns['claimRewards()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        gameCid: BinaryState
        owner: string
        rewardPer100: bigint
        playsSinceLastReward: bigint
        pendingOwner: bigint
        totalPool: bigint
        initialized: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type PrizeSignatures = keyof PrizeTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type PrizeNonVoidMethodSignatures = keyof PrizeTypes['methods'] extends infer T ? T extends keyof PrizeTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Prize smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends PrizeSignatures> = PrizeTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Prize smart contract to the method's return type
 */
export type MethodReturn<TSignature extends PrizeSignatures> = PrizeTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = PrizeTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type PrizeCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type PrizeDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: PrizeCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Prize smart contract
 */
export abstract class PrizeParamsFactory {
  /**
   * Constructs a no op call for the init(byte[],account,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static init(params: CallParams<PrizeArgs['obj']['init(byte[],account,uint64)void'] | PrizeArgs['tuple']['init(byte[],account,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'init(byte[],account,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameCid, params.args.owner, params.args.rewardPer100],
    }
  }
  /**
   * Constructs a no op call for the recordPlay()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static recordPlay(params: CallParams<PrizeArgs['obj']['recordPlay()void'] | PrizeArgs['tuple']['recordPlay()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'recordPlay()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getPending()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPending(params: CallParams<PrizeArgs['obj']['getPending()uint64'] | PrizeArgs['tuple']['getPending()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPending()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the fundPool(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static fundPool(params: CallParams<PrizeArgs['obj']['fundPool(uint64)void'] | PrizeArgs['tuple']['fundPool(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'fundPool(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.paymentAmount],
    }
  }
  /**
   * Constructs a no op call for the getPoolBalance()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPoolBalance(params: CallParams<PrizeArgs['obj']['getPoolBalance()uint64'] | PrizeArgs['tuple']['getPoolBalance()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPoolBalance()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the claimRewards()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static claimRewards(params: CallParams<PrizeArgs['obj']['claimRewards()void'] | PrizeArgs['tuple']['claimRewards()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'claimRewards()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Prize smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class PrizeFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `PrizeFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new PrizeClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new PrizeClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Prize smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: PrizeDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new PrizeClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Prize smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Prize smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Prize smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new PrizeClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Prize smart contract
 */
export class PrizeClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `PrizeClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Prize app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `PrizeClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends PrizeNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `PrizeClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<PrizeClient> {
    return new PrizeClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `PrizeClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<PrizeClient> {
    return new PrizeClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Prize smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Prize smart contract using the `init(byte[],account,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    init: (params: CallParams<PrizeArgs['obj']['init(byte[],account,uint64)void'] | PrizeArgs['tuple']['init(byte[],account,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PrizeParamsFactory.init(params))
    },

    /**
     * Makes a call to the Prize smart contract using the `recordPlay()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    recordPlay: (params: CallParams<PrizeArgs['obj']['recordPlay()void'] | PrizeArgs['tuple']['recordPlay()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PrizeParamsFactory.recordPlay(params))
    },

    /**
     * Makes a call to the Prize smart contract using the `getPending()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPending: (params: CallParams<PrizeArgs['obj']['getPending()uint64'] | PrizeArgs['tuple']['getPending()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PrizeParamsFactory.getPending(params))
    },

    /**
     * Makes a call to the Prize smart contract using the `fundPool(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    fundPool: (params: CallParams<PrizeArgs['obj']['fundPool(uint64)void'] | PrizeArgs['tuple']['fundPool(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PrizeParamsFactory.fundPool(params))
    },

    /**
     * Makes a call to the Prize smart contract using the `getPoolBalance()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPoolBalance: (params: CallParams<PrizeArgs['obj']['getPoolBalance()uint64'] | PrizeArgs['tuple']['getPoolBalance()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PrizeParamsFactory.getPoolBalance(params))
    },

    /**
     * Makes a call to the Prize smart contract using the `claimRewards()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    claimRewards: (params: CallParams<PrizeArgs['obj']['claimRewards()void'] | PrizeArgs['tuple']['claimRewards()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PrizeParamsFactory.claimRewards(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Prize smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Prize smart contract using the `init(byte[],account,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    init: (params: CallParams<PrizeArgs['obj']['init(byte[],account,uint64)void'] | PrizeArgs['tuple']['init(byte[],account,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PrizeParamsFactory.init(params))
    },

    /**
     * Makes a call to the Prize smart contract using the `recordPlay()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    recordPlay: (params: CallParams<PrizeArgs['obj']['recordPlay()void'] | PrizeArgs['tuple']['recordPlay()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PrizeParamsFactory.recordPlay(params))
    },

    /**
     * Makes a call to the Prize smart contract using the `getPending()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPending: (params: CallParams<PrizeArgs['obj']['getPending()uint64'] | PrizeArgs['tuple']['getPending()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PrizeParamsFactory.getPending(params))
    },

    /**
     * Makes a call to the Prize smart contract using the `fundPool(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    fundPool: (params: CallParams<PrizeArgs['obj']['fundPool(uint64)void'] | PrizeArgs['tuple']['fundPool(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PrizeParamsFactory.fundPool(params))
    },

    /**
     * Makes a call to the Prize smart contract using the `getPoolBalance()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPoolBalance: (params: CallParams<PrizeArgs['obj']['getPoolBalance()uint64'] | PrizeArgs['tuple']['getPoolBalance()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PrizeParamsFactory.getPoolBalance(params))
    },

    /**
     * Makes a call to the Prize smart contract using the `claimRewards()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    claimRewards: (params: CallParams<PrizeArgs['obj']['claimRewards()void'] | PrizeArgs['tuple']['claimRewards()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PrizeParamsFactory.claimRewards(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Prize smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Prize smart contract using the `init(byte[],account,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    init: async (params: CallParams<PrizeArgs['obj']['init(byte[],account,uint64)void'] | PrizeArgs['tuple']['init(byte[],account,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PrizeParamsFactory.init(params))
      return {...result, return: result.return as unknown as (undefined | PrizeReturns['init(byte[],account,uint64)void'])}
    },

    /**
     * Makes a call to the Prize smart contract using the `recordPlay()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    recordPlay: async (params: CallParams<PrizeArgs['obj']['recordPlay()void'] | PrizeArgs['tuple']['recordPlay()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PrizeParamsFactory.recordPlay(params))
      return {...result, return: result.return as unknown as (undefined | PrizeReturns['recordPlay()void'])}
    },

    /**
     * Makes a call to the Prize smart contract using the `getPending()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPending: async (params: CallParams<PrizeArgs['obj']['getPending()uint64'] | PrizeArgs['tuple']['getPending()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PrizeParamsFactory.getPending(params))
      return {...result, return: result.return as unknown as (undefined | PrizeReturns['getPending()uint64'])}
    },

    /**
     * Makes a call to the Prize smart contract using the `fundPool(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    fundPool: async (params: CallParams<PrizeArgs['obj']['fundPool(uint64)void'] | PrizeArgs['tuple']['fundPool(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PrizeParamsFactory.fundPool(params))
      return {...result, return: result.return as unknown as (undefined | PrizeReturns['fundPool(uint64)void'])}
    },

    /**
     * Makes a call to the Prize smart contract using the `getPoolBalance()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPoolBalance: async (params: CallParams<PrizeArgs['obj']['getPoolBalance()uint64'] | PrizeArgs['tuple']['getPoolBalance()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PrizeParamsFactory.getPoolBalance(params))
      return {...result, return: result.return as unknown as (undefined | PrizeReturns['getPoolBalance()uint64'])}
    },

    /**
     * Makes a call to the Prize smart contract using the `claimRewards()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    claimRewards: async (params: CallParams<PrizeArgs['obj']['claimRewards()void'] | PrizeArgs['tuple']['claimRewards()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PrizeParamsFactory.claimRewards(params))
      return {...result, return: result.return as unknown as (undefined | PrizeReturns['claimRewards()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new PrizeClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the Prize smart contract using the `getPending()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getPending(params: CallParams<PrizeArgs['obj']['getPending()uint64'] | PrizeArgs['tuple']['getPending()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(PrizeParamsFactory.getPending(params))
    return result.return as unknown as PrizeReturns['getPending()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the Prize smart contract using the `getPoolBalance()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getPoolBalance(params: CallParams<PrizeArgs['obj']['getPoolBalance()uint64'] | PrizeArgs['tuple']['getPoolBalance()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(PrizeParamsFactory.getPoolBalance(params))
    return result.return as unknown as PrizeReturns['getPoolBalance()uint64']
  }

  /**
   * Methods to access state for the current Prize app
   */
  state = {
    /**
     * Methods to access global state for the current Prize app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          gameCid: new BinaryStateValue(result.gameCid),
          owner: result.owner,
          rewardPer100: result.rewardPer100,
          playsSinceLastReward: result.playsSinceLastReward,
          pendingOwner: result.pendingOwner,
          totalPool: result.totalPool,
          initialized: result.initialized,
        }
      },
      /**
       * Get the current value of the gameCid key in global state
       */
      gameCid: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("gameCid")) as Uint8Array | undefined) },
      /**
       * Get the current value of the owner key in global state
       */
      owner: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("owner")) as string | undefined },
      /**
       * Get the current value of the rewardPer100 key in global state
       */
      rewardPer100: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("rewardPer100")) as bigint | undefined },
      /**
       * Get the current value of the playsSinceLastReward key in global state
       */
      playsSinceLastReward: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("playsSinceLastReward")) as bigint | undefined },
      /**
       * Get the current value of the pendingOwner key in global state
       */
      pendingOwner: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("pendingOwner")) as bigint | undefined },
      /**
       * Get the current value of the totalPool key in global state
       */
      totalPool: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalPool")) as bigint | undefined },
      /**
       * Get the current value of the initialized key in global state
       */
      initialized: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("initialized")) as bigint | undefined },
    },
  }

  public newGroup(): PrizeComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a init(byte[],account,uint64)void method call against the Prize contract
       */
      init(params: CallParams<PrizeArgs['obj']['init(byte[],account,uint64)void'] | PrizeArgs['tuple']['init(byte[],account,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.init(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a recordPlay()void method call against the Prize contract
       */
      recordPlay(params: CallParams<PrizeArgs['obj']['recordPlay()void'] | PrizeArgs['tuple']['recordPlay()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.recordPlay(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getPending()uint64 method call against the Prize contract
       */
      getPending(params: CallParams<PrizeArgs['obj']['getPending()uint64'] | PrizeArgs['tuple']['getPending()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPending(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPending()uint64', v))
        return this
      },
      /**
       * Add a fundPool(uint64)void method call against the Prize contract
       */
      fundPool(params: CallParams<PrizeArgs['obj']['fundPool(uint64)void'] | PrizeArgs['tuple']['fundPool(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.fundPool(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getPoolBalance()uint64 method call against the Prize contract
       */
      getPoolBalance(params: CallParams<PrizeArgs['obj']['getPoolBalance()uint64'] | PrizeArgs['tuple']['getPoolBalance()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPoolBalance(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPoolBalance()uint64', v))
        return this
      },
      /**
       * Add a claimRewards()void method call against the Prize contract
       */
      claimRewards(params: CallParams<PrizeArgs['obj']['claimRewards()void'] | PrizeArgs['tuple']['claimRewards()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.claimRewards(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the Prize contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as PrizeComposer
  }
}
export type PrizeComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the init(byte[],account,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  init(params?: CallParams<PrizeArgs['obj']['init(byte[],account,uint64)void'] | PrizeArgs['tuple']['init(byte[],account,uint64)void']>): PrizeComposer<[...TReturns, PrizeReturns['init(byte[],account,uint64)void'] | undefined]>

  /**
   * Calls the recordPlay()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  recordPlay(params?: CallParams<PrizeArgs['obj']['recordPlay()void'] | PrizeArgs['tuple']['recordPlay()void']>): PrizeComposer<[...TReturns, PrizeReturns['recordPlay()void'] | undefined]>

  /**
   * Calls the getPending()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPending(params?: CallParams<PrizeArgs['obj']['getPending()uint64'] | PrizeArgs['tuple']['getPending()uint64']>): PrizeComposer<[...TReturns, PrizeReturns['getPending()uint64'] | undefined]>

  /**
   * Calls the fundPool(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  fundPool(params?: CallParams<PrizeArgs['obj']['fundPool(uint64)void'] | PrizeArgs['tuple']['fundPool(uint64)void']>): PrizeComposer<[...TReturns, PrizeReturns['fundPool(uint64)void'] | undefined]>

  /**
   * Calls the getPoolBalance()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPoolBalance(params?: CallParams<PrizeArgs['obj']['getPoolBalance()uint64'] | PrizeArgs['tuple']['getPoolBalance()uint64']>): PrizeComposer<[...TReturns, PrizeReturns['getPoolBalance()uint64'] | undefined]>

  /**
   * Calls the claimRewards()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimRewards(params?: CallParams<PrizeArgs['obj']['claimRewards()void'] | PrizeArgs['tuple']['claimRewards()void']>): PrizeComposer<[...TReturns, PrizeReturns['claimRewards()void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Prize smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): PrizeComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): PrizeComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<PrizeComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<PrizeComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<PrizeComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<PrizeComposerResults<TReturns>>
}
export type PrizeComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

