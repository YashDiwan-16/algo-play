/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"AiPoolGame","structs":{},"methods":[{"name":"init","args":[{"type":"byte[]","name":"gameId"},{"type":"account","name":"owner"},{"type":"uint64","name":"minStake"},{"type":"uint64","name":"maxBots"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"fundPool","args":[{"type":"uint64","name":"poolAmount"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"joinGame","args":[{"type":"uint64","name":"stakeAmount"},{"type":"uint64","name":"botCount"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"startGame","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"endGame","args":[{"type":"uint64","name":"humanWon"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"claimRefund","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"resetGame","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getGameId","args":[],"returns":{"type":"byte[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"getGameStatus","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"getMinStake","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"getMaxBots","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"getTotalPool","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"getCurrentGamePool","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"getGameStartTime","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"getGameEndTime","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"getHumanStake","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"getBotCount","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"getGameRound","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"calculatePotentialWinnings","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"calculateBotStakePerBot","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"emergencyWithdraw","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":11,"bytes":4},"local":{"ints":0,"bytes":0}},"keys":{"global":{"gameId":{"keyType":"AVMString","valueType":"AVMBytes","key":"Z2FtZUlk"},"owner":{"keyType":"AVMString","valueType":"address","key":"b3duZXI="},"gameStatus":{"keyType":"AVMString","valueType":"AVMUint64","key":"Z2FtZVN0YXR1cw=="},"minStake":{"keyType":"AVMString","valueType":"AVMUint64","key":"bWluU3Rha2U="},"maxBots":{"keyType":"AVMString","valueType":"AVMUint64","key":"bWF4Qm90cw=="},"totalPool":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxQb29s"},"currentGamePool":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y3VycmVudEdhbWVQb29s"},"winner":{"keyType":"AVMString","valueType":"address","key":"d2lubmVy"},"gameStartTime":{"keyType":"AVMString","valueType":"AVMUint64","key":"Z2FtZVN0YXJ0VGltZQ=="},"gameEndTime":{"keyType":"AVMString","valueType":"AVMUint64","key":"Z2FtZUVuZFRpbWU="},"initialized":{"keyType":"AVMString","valueType":"AVMUint64","key":"aW5pdGlhbGl6ZWQ="},"humanPlayer":{"keyType":"AVMString","valueType":"address","key":"aHVtYW5QbGF5ZXI="},"humanStake":{"keyType":"AVMString","valueType":"AVMUint64","key":"aHVtYW5TdGFrZQ=="},"botCount":{"keyType":"AVMString","valueType":"AVMUint64","key":"Ym90Q291bnQ="},"gameRound":{"keyType":"AVMString","valueType":"AVMUint64","key":"Z2FtZVJvdW5k"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[1341],"errorMessage":"Can only withdraw in waiting state"},{"pc":[776,829,955,995,1102,1160,1327],"errorMessage":"Contract not initialized"},{"pc":[1011],"errorMessage":"Game not active"},{"pc":[1109,1175],"errorMessage":"Game not finished"},{"pc":[835,969],"errorMessage":"Game not in waiting state"},{"pc":[849],"errorMessage":"Need at least 2 bots"},{"pc":[975],"errorMessage":"No human player joined"},{"pc":[1137],"errorMessage":"No stake to refund"},{"pc":[871],"errorMessage":"Not enough pool funds for bots"},{"pc":[331,343,360,377,394,411,428,445,462,479,496,513,530,547,571,583,595,611,623,643,659],"errorMessage":"OnCompletion is not NoOp"},{"pc":[1118],"errorMessage":"Only human player can claim refund"},{"pc":[1004],"errorMessage":"Only human player can end game"},{"pc":[1335],"errorMessage":"Only owner can emergency withdraw"},{"pc":[784],"errorMessage":"Only owner can fund pool"},{"pc":[1168],"errorMessage":"Only owner can reset game"},{"pc":[963],"errorMessage":"Only owner can start game"},{"pc":[797,884],"errorMessage":"Payment amount mismatch"},{"pc":[807,894],"errorMessage":"Payment receiver mismatch"},{"pc":[844],"errorMessage":"Stake amount too low"},{"pc":[858],"errorMessage":"Too many bots"},{"pc":[1130],"errorMessage":"Winner cannot claim refund"},{"pc":[805,892],"errorMessage":"application exists"},{"pc":[696],"errorMessage":"can only call when creating"},{"pc":[334,346,363,380,397,414,431,448,465,482,499,516,533,550,574,586,598,614,626,646,662],"errorMessage":"can only call when not creating"},{"pc":[773,782,811,826,833,840,854,867,923,933,952,961,967,974,992,1002,1008,1031,1041,1046,1074,1082,1087,1099,1106,1116,1123,1128,1135,1157,1166,1172,1182,1202,1220,1225,1231,1237,1242,1248,1254,1260,1266,1272,1278,1284,1294,1300,1308,1318,1324,1333,1339,1345,1353,1357],"errorMessage":"check GlobalState exists"},{"pc":[790,877],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiADAAECJhAEFR98dQpnYW1lU3RhdHVzCXRvdGFsUG9vbAVvd25lcg9jdXJyZW50R2FtZVBvb2wKaHVtYW5TdGFrZQtpbml0aWFsaXplZAtodW1hblBsYXllcghib3RDb3VudAZ3aW5uZXINZ2FtZVN0YXJ0VGltZQtnYW1lRW5kVGltZQlnYW1lUm91bmQIbWluU3Rha2UHbWF4Qm90cwZnYW1lSWQxG0ECBIIVBDEk2K8E9iIWQgS52IrpBDJ3rscEIxwUOwQEbX/2BFLElKAEex0P1QSdlOTdBH3q4+4E4jp5SATuQPccBIvGSiUEV7QxGwRFfGIjBLPajngE99F/cgQ8zA7YBFrh+GUEeLh3hwRe0iWJNhoAjhUBSgE6ASYBGgEKAP4A8gDaAMkAuACnAJYAhQB0AGMAUgBBADAAHwAOAAIiQzEZFEQxGESIA9YjQzEZFEQxGESIA7IWKExQsCNDMRkURDEYRIgDkRYoTFCwI0MxGRREMRhEiAN6FihMULAjQzEZFEQxGESIA2MWKExQsCNDMRkURDEYRIgDTBYoTFCwI0MxGRREMRhEiAM1FihMULAjQzEZFEQxGESIAx4WKExQsCNDMRkURDEYRIgDBxYoTFCwI0MxGRREMRhEiALxFihMULAjQzEZFEQxGESIAtoWKExQsCNDMRkURDEYRIgCwxYoTFCwI0MxGRREMRhEiAKtFihMULAjQzEZFEQxGESIApZJFRZXBgJMUChMULAjQzEZFEQxGESIAj8jQzEZFEQxGESIAfkjQzEZFEQxGEQ2GgEXiAF7I0MxGRREMRhEiAFKI0MxGRREMRhENhoBFzYaAheIALUjQzEZFEQxGEQ2GgEXiABwI0MxGRREMRhENhoBVwIANhoCF8AcNhoDFzYaBBeIAA0jQzEZQP6RMRgURCNDigQAJw+L/Gcri/1nJw2L/mcnDov/ZykiZyoiZycEImcnCYv9ZycKImcnCyJnJwYjZycHi/1nJwUiZycIImcnDCJniYoBACInBmVEIxJEMQAiK2VEEkQiOBAjEkQiOAiL/xJEIjgHMRhyCEQSRCIqZUSL/wgqTGeJigIAIicGZUQjEkQiKWVEFEQiJw1lRIv+DkSL/yQPRCInDmVEi/8PRIv+i/8LIiplREsBD0QiOBAjEkQiOAiL/hJEIjgHMRhyCEQSRCcHMQBnJwWL/mcnCIv/Z4v+SwEIJwRMZyInDGVEIwgnDExnIiplREwJKkxnKSNnJwoxA2eJIicGZUQjEkQxACIrZUQSRCIpZUQURCInBWVERCkjZycKMQNniYoBACInBmVEIxJEMQAiJwdlRBJEIillRCMSRCkkZycLMQNni/8jEkEALCInB2VEJwlMZ7EiJwdlRCInBGVEsgiyByOyECKyAbMnBCJnJwUiZycIImeJIitlRCcJTGciKmVEIicEZUQIKkxnQv/bIicGZUQjEkQiKWVEJBJEMQAiJwdlRBJEIicJZUQiJwdlRBNEIicFZURJRLExALIHsggjshAisgGziSInBmVEIxJEMQAiK2VEEkQiKWVEJBJEKSJnIitlRCcHTGcnBSJnJwgiZycEImciK2VEJwlMZycKImcnCyJniSInD2VEiSIpZUSJIicNZUSJIicOZUSJIiplRIkiJwRlRIkiJwplRIkiJwtlRIkiJwVlRIkiJwhlRIkiJwxlRIkiJwRlREAAAiKJIicEZUSJIicIZURBAAgiJwVlREAAAiKJIicFZUSJIicGZUQjEkQxACIrZUQSRCIpZUQURCIqZURBABexIitlRCIqZUSyCLIHI7IQIrIBsyoiZ4k=","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the AiPoolGame contract
 */
export type AiPoolGameArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'init(byte[],account,uint64,uint64)void': {
      gameId: Uint8Array
      owner: Uint8Array | string
      minStake: bigint | number
      maxBots: bigint | number
    }
    'fundPool(uint64)void': {
      poolAmount: bigint | number
    }
    'joinGame(uint64,uint64)void': {
      stakeAmount: bigint | number
      botCount: bigint | number
    }
    'startGame()void': Record<string, never>
    'endGame(uint64)void': {
      humanWon: bigint | number
    }
    'claimRefund()void': Record<string, never>
    'resetGame()void': Record<string, never>
    'getGameId()byte[]': Record<string, never>
    'getGameStatus()uint64': Record<string, never>
    'getMinStake()uint64': Record<string, never>
    'getMaxBots()uint64': Record<string, never>
    'getTotalPool()uint64': Record<string, never>
    'getCurrentGamePool()uint64': Record<string, never>
    'getGameStartTime()uint64': Record<string, never>
    'getGameEndTime()uint64': Record<string, never>
    'getHumanStake()uint64': Record<string, never>
    'getBotCount()uint64': Record<string, never>
    'getGameRound()uint64': Record<string, never>
    'calculatePotentialWinnings()uint64': Record<string, never>
    'calculateBotStakePerBot()uint64': Record<string, never>
    'emergencyWithdraw()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'init(byte[],account,uint64,uint64)void': [gameId: Uint8Array, owner: Uint8Array | string, minStake: bigint | number, maxBots: bigint | number]
    'fundPool(uint64)void': [poolAmount: bigint | number]
    'joinGame(uint64,uint64)void': [stakeAmount: bigint | number, botCount: bigint | number]
    'startGame()void': []
    'endGame(uint64)void': [humanWon: bigint | number]
    'claimRefund()void': []
    'resetGame()void': []
    'getGameId()byte[]': []
    'getGameStatus()uint64': []
    'getMinStake()uint64': []
    'getMaxBots()uint64': []
    'getTotalPool()uint64': []
    'getCurrentGamePool()uint64': []
    'getGameStartTime()uint64': []
    'getGameEndTime()uint64': []
    'getHumanStake()uint64': []
    'getBotCount()uint64': []
    'getGameRound()uint64': []
    'calculatePotentialWinnings()uint64': []
    'calculateBotStakePerBot()uint64': []
    'emergencyWithdraw()void': []
  }
}

/**
 * The return type for each method
 */
export type AiPoolGameReturns = {
  'init(byte[],account,uint64,uint64)void': void
  'fundPool(uint64)void': void
  'joinGame(uint64,uint64)void': void
  'startGame()void': void
  'endGame(uint64)void': void
  'claimRefund()void': void
  'resetGame()void': void
  'getGameId()byte[]': Uint8Array
  'getGameStatus()uint64': bigint
  'getMinStake()uint64': bigint
  'getMaxBots()uint64': bigint
  'getTotalPool()uint64': bigint
  'getCurrentGamePool()uint64': bigint
  'getGameStartTime()uint64': bigint
  'getGameEndTime()uint64': bigint
  'getHumanStake()uint64': bigint
  'getBotCount()uint64': bigint
  'getGameRound()uint64': bigint
  'calculatePotentialWinnings()uint64': bigint
  'calculateBotStakePerBot()uint64': bigint
  'emergencyWithdraw()void': void
}

/**
 * Defines the types of available calls and state of the AiPoolGame smart contract.
 */
export type AiPoolGameTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'init(byte[],account,uint64,uint64)void' | 'init', {
      argsObj: AiPoolGameArgs['obj']['init(byte[],account,uint64,uint64)void']
      argsTuple: AiPoolGameArgs['tuple']['init(byte[],account,uint64,uint64)void']
      returns: AiPoolGameReturns['init(byte[],account,uint64,uint64)void']
    }>
    & Record<'fundPool(uint64)void' | 'fundPool', {
      argsObj: AiPoolGameArgs['obj']['fundPool(uint64)void']
      argsTuple: AiPoolGameArgs['tuple']['fundPool(uint64)void']
      returns: AiPoolGameReturns['fundPool(uint64)void']
    }>
    & Record<'joinGame(uint64,uint64)void' | 'joinGame', {
      argsObj: AiPoolGameArgs['obj']['joinGame(uint64,uint64)void']
      argsTuple: AiPoolGameArgs['tuple']['joinGame(uint64,uint64)void']
      returns: AiPoolGameReturns['joinGame(uint64,uint64)void']
    }>
    & Record<'startGame()void' | 'startGame', {
      argsObj: AiPoolGameArgs['obj']['startGame()void']
      argsTuple: AiPoolGameArgs['tuple']['startGame()void']
      returns: AiPoolGameReturns['startGame()void']
    }>
    & Record<'endGame(uint64)void' | 'endGame', {
      argsObj: AiPoolGameArgs['obj']['endGame(uint64)void']
      argsTuple: AiPoolGameArgs['tuple']['endGame(uint64)void']
      returns: AiPoolGameReturns['endGame(uint64)void']
    }>
    & Record<'claimRefund()void' | 'claimRefund', {
      argsObj: AiPoolGameArgs['obj']['claimRefund()void']
      argsTuple: AiPoolGameArgs['tuple']['claimRefund()void']
      returns: AiPoolGameReturns['claimRefund()void']
    }>
    & Record<'resetGame()void' | 'resetGame', {
      argsObj: AiPoolGameArgs['obj']['resetGame()void']
      argsTuple: AiPoolGameArgs['tuple']['resetGame()void']
      returns: AiPoolGameReturns['resetGame()void']
    }>
    & Record<'getGameId()byte[]' | 'getGameId', {
      argsObj: AiPoolGameArgs['obj']['getGameId()byte[]']
      argsTuple: AiPoolGameArgs['tuple']['getGameId()byte[]']
      returns: AiPoolGameReturns['getGameId()byte[]']
    }>
    & Record<'getGameStatus()uint64' | 'getGameStatus', {
      argsObj: AiPoolGameArgs['obj']['getGameStatus()uint64']
      argsTuple: AiPoolGameArgs['tuple']['getGameStatus()uint64']
      returns: AiPoolGameReturns['getGameStatus()uint64']
    }>
    & Record<'getMinStake()uint64' | 'getMinStake', {
      argsObj: AiPoolGameArgs['obj']['getMinStake()uint64']
      argsTuple: AiPoolGameArgs['tuple']['getMinStake()uint64']
      returns: AiPoolGameReturns['getMinStake()uint64']
    }>
    & Record<'getMaxBots()uint64' | 'getMaxBots', {
      argsObj: AiPoolGameArgs['obj']['getMaxBots()uint64']
      argsTuple: AiPoolGameArgs['tuple']['getMaxBots()uint64']
      returns: AiPoolGameReturns['getMaxBots()uint64']
    }>
    & Record<'getTotalPool()uint64' | 'getTotalPool', {
      argsObj: AiPoolGameArgs['obj']['getTotalPool()uint64']
      argsTuple: AiPoolGameArgs['tuple']['getTotalPool()uint64']
      returns: AiPoolGameReturns['getTotalPool()uint64']
    }>
    & Record<'getCurrentGamePool()uint64' | 'getCurrentGamePool', {
      argsObj: AiPoolGameArgs['obj']['getCurrentGamePool()uint64']
      argsTuple: AiPoolGameArgs['tuple']['getCurrentGamePool()uint64']
      returns: AiPoolGameReturns['getCurrentGamePool()uint64']
    }>
    & Record<'getGameStartTime()uint64' | 'getGameStartTime', {
      argsObj: AiPoolGameArgs['obj']['getGameStartTime()uint64']
      argsTuple: AiPoolGameArgs['tuple']['getGameStartTime()uint64']
      returns: AiPoolGameReturns['getGameStartTime()uint64']
    }>
    & Record<'getGameEndTime()uint64' | 'getGameEndTime', {
      argsObj: AiPoolGameArgs['obj']['getGameEndTime()uint64']
      argsTuple: AiPoolGameArgs['tuple']['getGameEndTime()uint64']
      returns: AiPoolGameReturns['getGameEndTime()uint64']
    }>
    & Record<'getHumanStake()uint64' | 'getHumanStake', {
      argsObj: AiPoolGameArgs['obj']['getHumanStake()uint64']
      argsTuple: AiPoolGameArgs['tuple']['getHumanStake()uint64']
      returns: AiPoolGameReturns['getHumanStake()uint64']
    }>
    & Record<'getBotCount()uint64' | 'getBotCount', {
      argsObj: AiPoolGameArgs['obj']['getBotCount()uint64']
      argsTuple: AiPoolGameArgs['tuple']['getBotCount()uint64']
      returns: AiPoolGameReturns['getBotCount()uint64']
    }>
    & Record<'getGameRound()uint64' | 'getGameRound', {
      argsObj: AiPoolGameArgs['obj']['getGameRound()uint64']
      argsTuple: AiPoolGameArgs['tuple']['getGameRound()uint64']
      returns: AiPoolGameReturns['getGameRound()uint64']
    }>
    & Record<'calculatePotentialWinnings()uint64' | 'calculatePotentialWinnings', {
      argsObj: AiPoolGameArgs['obj']['calculatePotentialWinnings()uint64']
      argsTuple: AiPoolGameArgs['tuple']['calculatePotentialWinnings()uint64']
      returns: AiPoolGameReturns['calculatePotentialWinnings()uint64']
    }>
    & Record<'calculateBotStakePerBot()uint64' | 'calculateBotStakePerBot', {
      argsObj: AiPoolGameArgs['obj']['calculateBotStakePerBot()uint64']
      argsTuple: AiPoolGameArgs['tuple']['calculateBotStakePerBot()uint64']
      returns: AiPoolGameReturns['calculateBotStakePerBot()uint64']
    }>
    & Record<'emergencyWithdraw()void' | 'emergencyWithdraw', {
      argsObj: AiPoolGameArgs['obj']['emergencyWithdraw()void']
      argsTuple: AiPoolGameArgs['tuple']['emergencyWithdraw()void']
      returns: AiPoolGameReturns['emergencyWithdraw()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        gameId: BinaryState
        owner: string
        gameStatus: bigint
        minStake: bigint
        maxBots: bigint
        totalPool: bigint
        currentGamePool: bigint
        winner: string
        gameStartTime: bigint
        gameEndTime: bigint
        initialized: bigint
        humanPlayer: string
        humanStake: bigint
        botCount: bigint
        gameRound: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type AiPoolGameSignatures = keyof AiPoolGameTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type AiPoolGameNonVoidMethodSignatures = keyof AiPoolGameTypes['methods'] extends infer T ? T extends keyof AiPoolGameTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the AiPoolGame smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends AiPoolGameSignatures> = AiPoolGameTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AiPoolGame smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AiPoolGameSignatures> = AiPoolGameTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = AiPoolGameTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type AiPoolGameCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type AiPoolGameDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: AiPoolGameCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the AiPoolGame smart contract
 */
export abstract class AiPoolGameParamsFactory {
  /**
   * Constructs a no op call for the init(byte[],account,uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static init(params: CallParams<AiPoolGameArgs['obj']['init(byte[],account,uint64,uint64)void'] | AiPoolGameArgs['tuple']['init(byte[],account,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'init(byte[],account,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameId, params.args.owner, params.args.minStake, params.args.maxBots],
    }
  }
  /**
   * Constructs a no op call for the fundPool(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static fundPool(params: CallParams<AiPoolGameArgs['obj']['fundPool(uint64)void'] | AiPoolGameArgs['tuple']['fundPool(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'fundPool(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolAmount],
    }
  }
  /**
   * Constructs a no op call for the joinGame(uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static joinGame(params: CallParams<AiPoolGameArgs['obj']['joinGame(uint64,uint64)void'] | AiPoolGameArgs['tuple']['joinGame(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'joinGame(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.stakeAmount, params.args.botCount],
    }
  }
  /**
   * Constructs a no op call for the startGame()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static startGame(params: CallParams<AiPoolGameArgs['obj']['startGame()void'] | AiPoolGameArgs['tuple']['startGame()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'startGame()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the endGame(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static endGame(params: CallParams<AiPoolGameArgs['obj']['endGame(uint64)void'] | AiPoolGameArgs['tuple']['endGame(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'endGame(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.humanWon],
    }
  }
  /**
   * Constructs a no op call for the claimRefund()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static claimRefund(params: CallParams<AiPoolGameArgs['obj']['claimRefund()void'] | AiPoolGameArgs['tuple']['claimRefund()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'claimRefund()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the resetGame()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static resetGame(params: CallParams<AiPoolGameArgs['obj']['resetGame()void'] | AiPoolGameArgs['tuple']['resetGame()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'resetGame()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getGameId()byte[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getGameId(params: CallParams<AiPoolGameArgs['obj']['getGameId()byte[]'] | AiPoolGameArgs['tuple']['getGameId()byte[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getGameId()byte[]' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getGameStatus()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getGameStatus(params: CallParams<AiPoolGameArgs['obj']['getGameStatus()uint64'] | AiPoolGameArgs['tuple']['getGameStatus()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getGameStatus()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getMinStake()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getMinStake(params: CallParams<AiPoolGameArgs['obj']['getMinStake()uint64'] | AiPoolGameArgs['tuple']['getMinStake()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getMinStake()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getMaxBots()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getMaxBots(params: CallParams<AiPoolGameArgs['obj']['getMaxBots()uint64'] | AiPoolGameArgs['tuple']['getMaxBots()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getMaxBots()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getTotalPool()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTotalPool(params: CallParams<AiPoolGameArgs['obj']['getTotalPool()uint64'] | AiPoolGameArgs['tuple']['getTotalPool()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTotalPool()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getCurrentGamePool()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getCurrentGamePool(params: CallParams<AiPoolGameArgs['obj']['getCurrentGamePool()uint64'] | AiPoolGameArgs['tuple']['getCurrentGamePool()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getCurrentGamePool()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getGameStartTime()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getGameStartTime(params: CallParams<AiPoolGameArgs['obj']['getGameStartTime()uint64'] | AiPoolGameArgs['tuple']['getGameStartTime()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getGameStartTime()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getGameEndTime()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getGameEndTime(params: CallParams<AiPoolGameArgs['obj']['getGameEndTime()uint64'] | AiPoolGameArgs['tuple']['getGameEndTime()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getGameEndTime()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getHumanStake()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getHumanStake(params: CallParams<AiPoolGameArgs['obj']['getHumanStake()uint64'] | AiPoolGameArgs['tuple']['getHumanStake()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getHumanStake()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getBotCount()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getBotCount(params: CallParams<AiPoolGameArgs['obj']['getBotCount()uint64'] | AiPoolGameArgs['tuple']['getBotCount()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getBotCount()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getGameRound()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getGameRound(params: CallParams<AiPoolGameArgs['obj']['getGameRound()uint64'] | AiPoolGameArgs['tuple']['getGameRound()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getGameRound()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the calculatePotentialWinnings()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculatePotentialWinnings(params: CallParams<AiPoolGameArgs['obj']['calculatePotentialWinnings()uint64'] | AiPoolGameArgs['tuple']['calculatePotentialWinnings()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculatePotentialWinnings()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the calculateBotStakePerBot()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculateBotStakePerBot(params: CallParams<AiPoolGameArgs['obj']['calculateBotStakePerBot()uint64'] | AiPoolGameArgs['tuple']['calculateBotStakePerBot()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculateBotStakePerBot()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the emergencyWithdraw()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static emergencyWithdraw(params: CallParams<AiPoolGameArgs['obj']['emergencyWithdraw()void'] | AiPoolGameArgs['tuple']['emergencyWithdraw()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'emergencyWithdraw()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the AiPoolGame smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class AiPoolGameFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `AiPoolGameFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new AiPoolGameClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new AiPoolGameClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the AiPoolGame smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: AiPoolGameDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new AiPoolGameClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AiPoolGame smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AiPoolGame smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AiPoolGame smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new AiPoolGameClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the AiPoolGame smart contract
 */
export class AiPoolGameClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `AiPoolGameClient`
   *
   * @param appClient An `AppClient` instance which has been created with the AiPoolGame app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `AiPoolGameClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends AiPoolGameNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `AiPoolGameClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<AiPoolGameClient> {
    return new AiPoolGameClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `AiPoolGameClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<AiPoolGameClient> {
    return new AiPoolGameClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the AiPoolGame smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `init(byte[],account,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    init: (params: CallParams<AiPoolGameArgs['obj']['init(byte[],account,uint64,uint64)void'] | AiPoolGameArgs['tuple']['init(byte[],account,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AiPoolGameParamsFactory.init(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `fundPool(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    fundPool: (params: CallParams<AiPoolGameArgs['obj']['fundPool(uint64)void'] | AiPoolGameArgs['tuple']['fundPool(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AiPoolGameParamsFactory.fundPool(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `joinGame(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    joinGame: (params: CallParams<AiPoolGameArgs['obj']['joinGame(uint64,uint64)void'] | AiPoolGameArgs['tuple']['joinGame(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AiPoolGameParamsFactory.joinGame(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `startGame()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    startGame: (params: CallParams<AiPoolGameArgs['obj']['startGame()void'] | AiPoolGameArgs['tuple']['startGame()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AiPoolGameParamsFactory.startGame(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `endGame(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    endGame: (params: CallParams<AiPoolGameArgs['obj']['endGame(uint64)void'] | AiPoolGameArgs['tuple']['endGame(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AiPoolGameParamsFactory.endGame(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `claimRefund()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    claimRefund: (params: CallParams<AiPoolGameArgs['obj']['claimRefund()void'] | AiPoolGameArgs['tuple']['claimRefund()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AiPoolGameParamsFactory.claimRefund(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `resetGame()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    resetGame: (params: CallParams<AiPoolGameArgs['obj']['resetGame()void'] | AiPoolGameArgs['tuple']['resetGame()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AiPoolGameParamsFactory.resetGame(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `getGameId()byte[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getGameId: (params: CallParams<AiPoolGameArgs['obj']['getGameId()byte[]'] | AiPoolGameArgs['tuple']['getGameId()byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AiPoolGameParamsFactory.getGameId(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `getGameStatus()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getGameStatus: (params: CallParams<AiPoolGameArgs['obj']['getGameStatus()uint64'] | AiPoolGameArgs['tuple']['getGameStatus()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AiPoolGameParamsFactory.getGameStatus(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `getMinStake()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getMinStake: (params: CallParams<AiPoolGameArgs['obj']['getMinStake()uint64'] | AiPoolGameArgs['tuple']['getMinStake()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AiPoolGameParamsFactory.getMinStake(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `getMaxBots()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getMaxBots: (params: CallParams<AiPoolGameArgs['obj']['getMaxBots()uint64'] | AiPoolGameArgs['tuple']['getMaxBots()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AiPoolGameParamsFactory.getMaxBots(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `getTotalPool()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTotalPool: (params: CallParams<AiPoolGameArgs['obj']['getTotalPool()uint64'] | AiPoolGameArgs['tuple']['getTotalPool()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AiPoolGameParamsFactory.getTotalPool(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `getCurrentGamePool()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getCurrentGamePool: (params: CallParams<AiPoolGameArgs['obj']['getCurrentGamePool()uint64'] | AiPoolGameArgs['tuple']['getCurrentGamePool()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AiPoolGameParamsFactory.getCurrentGamePool(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `getGameStartTime()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getGameStartTime: (params: CallParams<AiPoolGameArgs['obj']['getGameStartTime()uint64'] | AiPoolGameArgs['tuple']['getGameStartTime()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AiPoolGameParamsFactory.getGameStartTime(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `getGameEndTime()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getGameEndTime: (params: CallParams<AiPoolGameArgs['obj']['getGameEndTime()uint64'] | AiPoolGameArgs['tuple']['getGameEndTime()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AiPoolGameParamsFactory.getGameEndTime(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `getHumanStake()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getHumanStake: (params: CallParams<AiPoolGameArgs['obj']['getHumanStake()uint64'] | AiPoolGameArgs['tuple']['getHumanStake()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AiPoolGameParamsFactory.getHumanStake(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `getBotCount()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getBotCount: (params: CallParams<AiPoolGameArgs['obj']['getBotCount()uint64'] | AiPoolGameArgs['tuple']['getBotCount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AiPoolGameParamsFactory.getBotCount(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `getGameRound()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getGameRound: (params: CallParams<AiPoolGameArgs['obj']['getGameRound()uint64'] | AiPoolGameArgs['tuple']['getGameRound()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AiPoolGameParamsFactory.getGameRound(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `calculatePotentialWinnings()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    calculatePotentialWinnings: (params: CallParams<AiPoolGameArgs['obj']['calculatePotentialWinnings()uint64'] | AiPoolGameArgs['tuple']['calculatePotentialWinnings()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AiPoolGameParamsFactory.calculatePotentialWinnings(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `calculateBotStakePerBot()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    calculateBotStakePerBot: (params: CallParams<AiPoolGameArgs['obj']['calculateBotStakePerBot()uint64'] | AiPoolGameArgs['tuple']['calculateBotStakePerBot()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AiPoolGameParamsFactory.calculateBotStakePerBot(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `emergencyWithdraw()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    emergencyWithdraw: (params: CallParams<AiPoolGameArgs['obj']['emergencyWithdraw()void'] | AiPoolGameArgs['tuple']['emergencyWithdraw()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AiPoolGameParamsFactory.emergencyWithdraw(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the AiPoolGame smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `init(byte[],account,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    init: (params: CallParams<AiPoolGameArgs['obj']['init(byte[],account,uint64,uint64)void'] | AiPoolGameArgs['tuple']['init(byte[],account,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AiPoolGameParamsFactory.init(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `fundPool(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    fundPool: (params: CallParams<AiPoolGameArgs['obj']['fundPool(uint64)void'] | AiPoolGameArgs['tuple']['fundPool(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AiPoolGameParamsFactory.fundPool(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `joinGame(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    joinGame: (params: CallParams<AiPoolGameArgs['obj']['joinGame(uint64,uint64)void'] | AiPoolGameArgs['tuple']['joinGame(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AiPoolGameParamsFactory.joinGame(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `startGame()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    startGame: (params: CallParams<AiPoolGameArgs['obj']['startGame()void'] | AiPoolGameArgs['tuple']['startGame()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AiPoolGameParamsFactory.startGame(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `endGame(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    endGame: (params: CallParams<AiPoolGameArgs['obj']['endGame(uint64)void'] | AiPoolGameArgs['tuple']['endGame(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AiPoolGameParamsFactory.endGame(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `claimRefund()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    claimRefund: (params: CallParams<AiPoolGameArgs['obj']['claimRefund()void'] | AiPoolGameArgs['tuple']['claimRefund()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AiPoolGameParamsFactory.claimRefund(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `resetGame()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    resetGame: (params: CallParams<AiPoolGameArgs['obj']['resetGame()void'] | AiPoolGameArgs['tuple']['resetGame()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AiPoolGameParamsFactory.resetGame(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `getGameId()byte[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getGameId: (params: CallParams<AiPoolGameArgs['obj']['getGameId()byte[]'] | AiPoolGameArgs['tuple']['getGameId()byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AiPoolGameParamsFactory.getGameId(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `getGameStatus()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getGameStatus: (params: CallParams<AiPoolGameArgs['obj']['getGameStatus()uint64'] | AiPoolGameArgs['tuple']['getGameStatus()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AiPoolGameParamsFactory.getGameStatus(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `getMinStake()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getMinStake: (params: CallParams<AiPoolGameArgs['obj']['getMinStake()uint64'] | AiPoolGameArgs['tuple']['getMinStake()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AiPoolGameParamsFactory.getMinStake(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `getMaxBots()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getMaxBots: (params: CallParams<AiPoolGameArgs['obj']['getMaxBots()uint64'] | AiPoolGameArgs['tuple']['getMaxBots()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AiPoolGameParamsFactory.getMaxBots(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `getTotalPool()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTotalPool: (params: CallParams<AiPoolGameArgs['obj']['getTotalPool()uint64'] | AiPoolGameArgs['tuple']['getTotalPool()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AiPoolGameParamsFactory.getTotalPool(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `getCurrentGamePool()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getCurrentGamePool: (params: CallParams<AiPoolGameArgs['obj']['getCurrentGamePool()uint64'] | AiPoolGameArgs['tuple']['getCurrentGamePool()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AiPoolGameParamsFactory.getCurrentGamePool(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `getGameStartTime()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getGameStartTime: (params: CallParams<AiPoolGameArgs['obj']['getGameStartTime()uint64'] | AiPoolGameArgs['tuple']['getGameStartTime()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AiPoolGameParamsFactory.getGameStartTime(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `getGameEndTime()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getGameEndTime: (params: CallParams<AiPoolGameArgs['obj']['getGameEndTime()uint64'] | AiPoolGameArgs['tuple']['getGameEndTime()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AiPoolGameParamsFactory.getGameEndTime(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `getHumanStake()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getHumanStake: (params: CallParams<AiPoolGameArgs['obj']['getHumanStake()uint64'] | AiPoolGameArgs['tuple']['getHumanStake()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AiPoolGameParamsFactory.getHumanStake(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `getBotCount()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getBotCount: (params: CallParams<AiPoolGameArgs['obj']['getBotCount()uint64'] | AiPoolGameArgs['tuple']['getBotCount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AiPoolGameParamsFactory.getBotCount(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `getGameRound()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getGameRound: (params: CallParams<AiPoolGameArgs['obj']['getGameRound()uint64'] | AiPoolGameArgs['tuple']['getGameRound()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AiPoolGameParamsFactory.getGameRound(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `calculatePotentialWinnings()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    calculatePotentialWinnings: (params: CallParams<AiPoolGameArgs['obj']['calculatePotentialWinnings()uint64'] | AiPoolGameArgs['tuple']['calculatePotentialWinnings()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AiPoolGameParamsFactory.calculatePotentialWinnings(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `calculateBotStakePerBot()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    calculateBotStakePerBot: (params: CallParams<AiPoolGameArgs['obj']['calculateBotStakePerBot()uint64'] | AiPoolGameArgs['tuple']['calculateBotStakePerBot()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AiPoolGameParamsFactory.calculateBotStakePerBot(params))
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `emergencyWithdraw()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    emergencyWithdraw: (params: CallParams<AiPoolGameArgs['obj']['emergencyWithdraw()void'] | AiPoolGameArgs['tuple']['emergencyWithdraw()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AiPoolGameParamsFactory.emergencyWithdraw(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the AiPoolGame smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `init(byte[],account,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    init: async (params: CallParams<AiPoolGameArgs['obj']['init(byte[],account,uint64,uint64)void'] | AiPoolGameArgs['tuple']['init(byte[],account,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AiPoolGameParamsFactory.init(params))
      return {...result, return: result.return as unknown as (undefined | AiPoolGameReturns['init(byte[],account,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `fundPool(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    fundPool: async (params: CallParams<AiPoolGameArgs['obj']['fundPool(uint64)void'] | AiPoolGameArgs['tuple']['fundPool(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AiPoolGameParamsFactory.fundPool(params))
      return {...result, return: result.return as unknown as (undefined | AiPoolGameReturns['fundPool(uint64)void'])}
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `joinGame(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    joinGame: async (params: CallParams<AiPoolGameArgs['obj']['joinGame(uint64,uint64)void'] | AiPoolGameArgs['tuple']['joinGame(uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AiPoolGameParamsFactory.joinGame(params))
      return {...result, return: result.return as unknown as (undefined | AiPoolGameReturns['joinGame(uint64,uint64)void'])}
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `startGame()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    startGame: async (params: CallParams<AiPoolGameArgs['obj']['startGame()void'] | AiPoolGameArgs['tuple']['startGame()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AiPoolGameParamsFactory.startGame(params))
      return {...result, return: result.return as unknown as (undefined | AiPoolGameReturns['startGame()void'])}
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `endGame(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    endGame: async (params: CallParams<AiPoolGameArgs['obj']['endGame(uint64)void'] | AiPoolGameArgs['tuple']['endGame(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AiPoolGameParamsFactory.endGame(params))
      return {...result, return: result.return as unknown as (undefined | AiPoolGameReturns['endGame(uint64)void'])}
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `claimRefund()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    claimRefund: async (params: CallParams<AiPoolGameArgs['obj']['claimRefund()void'] | AiPoolGameArgs['tuple']['claimRefund()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AiPoolGameParamsFactory.claimRefund(params))
      return {...result, return: result.return as unknown as (undefined | AiPoolGameReturns['claimRefund()void'])}
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `resetGame()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    resetGame: async (params: CallParams<AiPoolGameArgs['obj']['resetGame()void'] | AiPoolGameArgs['tuple']['resetGame()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AiPoolGameParamsFactory.resetGame(params))
      return {...result, return: result.return as unknown as (undefined | AiPoolGameReturns['resetGame()void'])}
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `getGameId()byte[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getGameId: async (params: CallParams<AiPoolGameArgs['obj']['getGameId()byte[]'] | AiPoolGameArgs['tuple']['getGameId()byte[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AiPoolGameParamsFactory.getGameId(params))
      return {...result, return: result.return as unknown as (undefined | AiPoolGameReturns['getGameId()byte[]'])}
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `getGameStatus()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getGameStatus: async (params: CallParams<AiPoolGameArgs['obj']['getGameStatus()uint64'] | AiPoolGameArgs['tuple']['getGameStatus()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AiPoolGameParamsFactory.getGameStatus(params))
      return {...result, return: result.return as unknown as (undefined | AiPoolGameReturns['getGameStatus()uint64'])}
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `getMinStake()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getMinStake: async (params: CallParams<AiPoolGameArgs['obj']['getMinStake()uint64'] | AiPoolGameArgs['tuple']['getMinStake()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AiPoolGameParamsFactory.getMinStake(params))
      return {...result, return: result.return as unknown as (undefined | AiPoolGameReturns['getMinStake()uint64'])}
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `getMaxBots()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getMaxBots: async (params: CallParams<AiPoolGameArgs['obj']['getMaxBots()uint64'] | AiPoolGameArgs['tuple']['getMaxBots()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AiPoolGameParamsFactory.getMaxBots(params))
      return {...result, return: result.return as unknown as (undefined | AiPoolGameReturns['getMaxBots()uint64'])}
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `getTotalPool()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTotalPool: async (params: CallParams<AiPoolGameArgs['obj']['getTotalPool()uint64'] | AiPoolGameArgs['tuple']['getTotalPool()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AiPoolGameParamsFactory.getTotalPool(params))
      return {...result, return: result.return as unknown as (undefined | AiPoolGameReturns['getTotalPool()uint64'])}
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `getCurrentGamePool()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getCurrentGamePool: async (params: CallParams<AiPoolGameArgs['obj']['getCurrentGamePool()uint64'] | AiPoolGameArgs['tuple']['getCurrentGamePool()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AiPoolGameParamsFactory.getCurrentGamePool(params))
      return {...result, return: result.return as unknown as (undefined | AiPoolGameReturns['getCurrentGamePool()uint64'])}
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `getGameStartTime()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getGameStartTime: async (params: CallParams<AiPoolGameArgs['obj']['getGameStartTime()uint64'] | AiPoolGameArgs['tuple']['getGameStartTime()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AiPoolGameParamsFactory.getGameStartTime(params))
      return {...result, return: result.return as unknown as (undefined | AiPoolGameReturns['getGameStartTime()uint64'])}
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `getGameEndTime()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getGameEndTime: async (params: CallParams<AiPoolGameArgs['obj']['getGameEndTime()uint64'] | AiPoolGameArgs['tuple']['getGameEndTime()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AiPoolGameParamsFactory.getGameEndTime(params))
      return {...result, return: result.return as unknown as (undefined | AiPoolGameReturns['getGameEndTime()uint64'])}
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `getHumanStake()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getHumanStake: async (params: CallParams<AiPoolGameArgs['obj']['getHumanStake()uint64'] | AiPoolGameArgs['tuple']['getHumanStake()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AiPoolGameParamsFactory.getHumanStake(params))
      return {...result, return: result.return as unknown as (undefined | AiPoolGameReturns['getHumanStake()uint64'])}
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `getBotCount()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getBotCount: async (params: CallParams<AiPoolGameArgs['obj']['getBotCount()uint64'] | AiPoolGameArgs['tuple']['getBotCount()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AiPoolGameParamsFactory.getBotCount(params))
      return {...result, return: result.return as unknown as (undefined | AiPoolGameReturns['getBotCount()uint64'])}
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `getGameRound()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getGameRound: async (params: CallParams<AiPoolGameArgs['obj']['getGameRound()uint64'] | AiPoolGameArgs['tuple']['getGameRound()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AiPoolGameParamsFactory.getGameRound(params))
      return {...result, return: result.return as unknown as (undefined | AiPoolGameReturns['getGameRound()uint64'])}
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `calculatePotentialWinnings()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    calculatePotentialWinnings: async (params: CallParams<AiPoolGameArgs['obj']['calculatePotentialWinnings()uint64'] | AiPoolGameArgs['tuple']['calculatePotentialWinnings()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AiPoolGameParamsFactory.calculatePotentialWinnings(params))
      return {...result, return: result.return as unknown as (undefined | AiPoolGameReturns['calculatePotentialWinnings()uint64'])}
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `calculateBotStakePerBot()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    calculateBotStakePerBot: async (params: CallParams<AiPoolGameArgs['obj']['calculateBotStakePerBot()uint64'] | AiPoolGameArgs['tuple']['calculateBotStakePerBot()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AiPoolGameParamsFactory.calculateBotStakePerBot(params))
      return {...result, return: result.return as unknown as (undefined | AiPoolGameReturns['calculateBotStakePerBot()uint64'])}
    },

    /**
     * Makes a call to the AiPoolGame smart contract using the `emergencyWithdraw()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    emergencyWithdraw: async (params: CallParams<AiPoolGameArgs['obj']['emergencyWithdraw()void'] | AiPoolGameArgs['tuple']['emergencyWithdraw()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AiPoolGameParamsFactory.emergencyWithdraw(params))
      return {...result, return: result.return as unknown as (undefined | AiPoolGameReturns['emergencyWithdraw()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new AiPoolGameClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the AiPoolGame smart contract using the `getGameId()byte[]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getGameId(params: CallParams<AiPoolGameArgs['obj']['getGameId()byte[]'] | AiPoolGameArgs['tuple']['getGameId()byte[]']> = {args: []}) {
    const result = await this.appClient.send.call(AiPoolGameParamsFactory.getGameId(params))
    return result.return as unknown as AiPoolGameReturns['getGameId()byte[]']
  }

  /**
   * Makes a readonly (simulated) call to the AiPoolGame smart contract using the `getGameStatus()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getGameStatus(params: CallParams<AiPoolGameArgs['obj']['getGameStatus()uint64'] | AiPoolGameArgs['tuple']['getGameStatus()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(AiPoolGameParamsFactory.getGameStatus(params))
    return result.return as unknown as AiPoolGameReturns['getGameStatus()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the AiPoolGame smart contract using the `getMinStake()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getMinStake(params: CallParams<AiPoolGameArgs['obj']['getMinStake()uint64'] | AiPoolGameArgs['tuple']['getMinStake()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(AiPoolGameParamsFactory.getMinStake(params))
    return result.return as unknown as AiPoolGameReturns['getMinStake()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the AiPoolGame smart contract using the `getMaxBots()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getMaxBots(params: CallParams<AiPoolGameArgs['obj']['getMaxBots()uint64'] | AiPoolGameArgs['tuple']['getMaxBots()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(AiPoolGameParamsFactory.getMaxBots(params))
    return result.return as unknown as AiPoolGameReturns['getMaxBots()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the AiPoolGame smart contract using the `getTotalPool()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getTotalPool(params: CallParams<AiPoolGameArgs['obj']['getTotalPool()uint64'] | AiPoolGameArgs['tuple']['getTotalPool()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(AiPoolGameParamsFactory.getTotalPool(params))
    return result.return as unknown as AiPoolGameReturns['getTotalPool()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the AiPoolGame smart contract using the `getCurrentGamePool()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getCurrentGamePool(params: CallParams<AiPoolGameArgs['obj']['getCurrentGamePool()uint64'] | AiPoolGameArgs['tuple']['getCurrentGamePool()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(AiPoolGameParamsFactory.getCurrentGamePool(params))
    return result.return as unknown as AiPoolGameReturns['getCurrentGamePool()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the AiPoolGame smart contract using the `getGameStartTime()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getGameStartTime(params: CallParams<AiPoolGameArgs['obj']['getGameStartTime()uint64'] | AiPoolGameArgs['tuple']['getGameStartTime()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(AiPoolGameParamsFactory.getGameStartTime(params))
    return result.return as unknown as AiPoolGameReturns['getGameStartTime()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the AiPoolGame smart contract using the `getGameEndTime()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getGameEndTime(params: CallParams<AiPoolGameArgs['obj']['getGameEndTime()uint64'] | AiPoolGameArgs['tuple']['getGameEndTime()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(AiPoolGameParamsFactory.getGameEndTime(params))
    return result.return as unknown as AiPoolGameReturns['getGameEndTime()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the AiPoolGame smart contract using the `getHumanStake()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getHumanStake(params: CallParams<AiPoolGameArgs['obj']['getHumanStake()uint64'] | AiPoolGameArgs['tuple']['getHumanStake()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(AiPoolGameParamsFactory.getHumanStake(params))
    return result.return as unknown as AiPoolGameReturns['getHumanStake()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the AiPoolGame smart contract using the `getBotCount()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getBotCount(params: CallParams<AiPoolGameArgs['obj']['getBotCount()uint64'] | AiPoolGameArgs['tuple']['getBotCount()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(AiPoolGameParamsFactory.getBotCount(params))
    return result.return as unknown as AiPoolGameReturns['getBotCount()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the AiPoolGame smart contract using the `getGameRound()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getGameRound(params: CallParams<AiPoolGameArgs['obj']['getGameRound()uint64'] | AiPoolGameArgs['tuple']['getGameRound()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(AiPoolGameParamsFactory.getGameRound(params))
    return result.return as unknown as AiPoolGameReturns['getGameRound()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the AiPoolGame smart contract using the `calculatePotentialWinnings()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async calculatePotentialWinnings(params: CallParams<AiPoolGameArgs['obj']['calculatePotentialWinnings()uint64'] | AiPoolGameArgs['tuple']['calculatePotentialWinnings()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(AiPoolGameParamsFactory.calculatePotentialWinnings(params))
    return result.return as unknown as AiPoolGameReturns['calculatePotentialWinnings()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the AiPoolGame smart contract using the `calculateBotStakePerBot()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async calculateBotStakePerBot(params: CallParams<AiPoolGameArgs['obj']['calculateBotStakePerBot()uint64'] | AiPoolGameArgs['tuple']['calculateBotStakePerBot()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(AiPoolGameParamsFactory.calculateBotStakePerBot(params))
    return result.return as unknown as AiPoolGameReturns['calculateBotStakePerBot()uint64']
  }

  /**
   * Methods to access state for the current AiPoolGame app
   */
  state = {
    /**
     * Methods to access global state for the current AiPoolGame app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          gameId: new BinaryStateValue(result.gameId),
          owner: result.owner,
          gameStatus: result.gameStatus,
          minStake: result.minStake,
          maxBots: result.maxBots,
          totalPool: result.totalPool,
          currentGamePool: result.currentGamePool,
          winner: result.winner,
          gameStartTime: result.gameStartTime,
          gameEndTime: result.gameEndTime,
          initialized: result.initialized,
          humanPlayer: result.humanPlayer,
          humanStake: result.humanStake,
          botCount: result.botCount,
          gameRound: result.gameRound,
        }
      },
      /**
       * Get the current value of the gameId key in global state
       */
      gameId: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("gameId")) as Uint8Array | undefined) },
      /**
       * Get the current value of the owner key in global state
       */
      owner: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("owner")) as string | undefined },
      /**
       * Get the current value of the gameStatus key in global state
       */
      gameStatus: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("gameStatus")) as bigint | undefined },
      /**
       * Get the current value of the minStake key in global state
       */
      minStake: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("minStake")) as bigint | undefined },
      /**
       * Get the current value of the maxBots key in global state
       */
      maxBots: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("maxBots")) as bigint | undefined },
      /**
       * Get the current value of the totalPool key in global state
       */
      totalPool: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalPool")) as bigint | undefined },
      /**
       * Get the current value of the currentGamePool key in global state
       */
      currentGamePool: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("currentGamePool")) as bigint | undefined },
      /**
       * Get the current value of the winner key in global state
       */
      winner: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("winner")) as string | undefined },
      /**
       * Get the current value of the gameStartTime key in global state
       */
      gameStartTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("gameStartTime")) as bigint | undefined },
      /**
       * Get the current value of the gameEndTime key in global state
       */
      gameEndTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("gameEndTime")) as bigint | undefined },
      /**
       * Get the current value of the initialized key in global state
       */
      initialized: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("initialized")) as bigint | undefined },
      /**
       * Get the current value of the humanPlayer key in global state
       */
      humanPlayer: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("humanPlayer")) as string | undefined },
      /**
       * Get the current value of the humanStake key in global state
       */
      humanStake: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("humanStake")) as bigint | undefined },
      /**
       * Get the current value of the botCount key in global state
       */
      botCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("botCount")) as bigint | undefined },
      /**
       * Get the current value of the gameRound key in global state
       */
      gameRound: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("gameRound")) as bigint | undefined },
    },
  }

  public newGroup(): AiPoolGameComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a init(byte[],account,uint64,uint64)void method call against the AiPoolGame contract
       */
      init(params: CallParams<AiPoolGameArgs['obj']['init(byte[],account,uint64,uint64)void'] | AiPoolGameArgs['tuple']['init(byte[],account,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.init(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a fundPool(uint64)void method call against the AiPoolGame contract
       */
      fundPool(params: CallParams<AiPoolGameArgs['obj']['fundPool(uint64)void'] | AiPoolGameArgs['tuple']['fundPool(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.fundPool(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a joinGame(uint64,uint64)void method call against the AiPoolGame contract
       */
      joinGame(params: CallParams<AiPoolGameArgs['obj']['joinGame(uint64,uint64)void'] | AiPoolGameArgs['tuple']['joinGame(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.joinGame(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a startGame()void method call against the AiPoolGame contract
       */
      startGame(params: CallParams<AiPoolGameArgs['obj']['startGame()void'] | AiPoolGameArgs['tuple']['startGame()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.startGame(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a endGame(uint64)void method call against the AiPoolGame contract
       */
      endGame(params: CallParams<AiPoolGameArgs['obj']['endGame(uint64)void'] | AiPoolGameArgs['tuple']['endGame(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.endGame(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a claimRefund()void method call against the AiPoolGame contract
       */
      claimRefund(params: CallParams<AiPoolGameArgs['obj']['claimRefund()void'] | AiPoolGameArgs['tuple']['claimRefund()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.claimRefund(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a resetGame()void method call against the AiPoolGame contract
       */
      resetGame(params: CallParams<AiPoolGameArgs['obj']['resetGame()void'] | AiPoolGameArgs['tuple']['resetGame()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.resetGame(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getGameId()byte[] method call against the AiPoolGame contract
       */
      getGameId(params: CallParams<AiPoolGameArgs['obj']['getGameId()byte[]'] | AiPoolGameArgs['tuple']['getGameId()byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getGameId(params)))
        resultMappers.push((v) => client.decodeReturnValue('getGameId()byte[]', v))
        return this
      },
      /**
       * Add a getGameStatus()uint64 method call against the AiPoolGame contract
       */
      getGameStatus(params: CallParams<AiPoolGameArgs['obj']['getGameStatus()uint64'] | AiPoolGameArgs['tuple']['getGameStatus()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getGameStatus(params)))
        resultMappers.push((v) => client.decodeReturnValue('getGameStatus()uint64', v))
        return this
      },
      /**
       * Add a getMinStake()uint64 method call against the AiPoolGame contract
       */
      getMinStake(params: CallParams<AiPoolGameArgs['obj']['getMinStake()uint64'] | AiPoolGameArgs['tuple']['getMinStake()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getMinStake(params)))
        resultMappers.push((v) => client.decodeReturnValue('getMinStake()uint64', v))
        return this
      },
      /**
       * Add a getMaxBots()uint64 method call against the AiPoolGame contract
       */
      getMaxBots(params: CallParams<AiPoolGameArgs['obj']['getMaxBots()uint64'] | AiPoolGameArgs['tuple']['getMaxBots()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getMaxBots(params)))
        resultMappers.push((v) => client.decodeReturnValue('getMaxBots()uint64', v))
        return this
      },
      /**
       * Add a getTotalPool()uint64 method call against the AiPoolGame contract
       */
      getTotalPool(params: CallParams<AiPoolGameArgs['obj']['getTotalPool()uint64'] | AiPoolGameArgs['tuple']['getTotalPool()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTotalPool(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTotalPool()uint64', v))
        return this
      },
      /**
       * Add a getCurrentGamePool()uint64 method call against the AiPoolGame contract
       */
      getCurrentGamePool(params: CallParams<AiPoolGameArgs['obj']['getCurrentGamePool()uint64'] | AiPoolGameArgs['tuple']['getCurrentGamePool()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getCurrentGamePool(params)))
        resultMappers.push((v) => client.decodeReturnValue('getCurrentGamePool()uint64', v))
        return this
      },
      /**
       * Add a getGameStartTime()uint64 method call against the AiPoolGame contract
       */
      getGameStartTime(params: CallParams<AiPoolGameArgs['obj']['getGameStartTime()uint64'] | AiPoolGameArgs['tuple']['getGameStartTime()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getGameStartTime(params)))
        resultMappers.push((v) => client.decodeReturnValue('getGameStartTime()uint64', v))
        return this
      },
      /**
       * Add a getGameEndTime()uint64 method call against the AiPoolGame contract
       */
      getGameEndTime(params: CallParams<AiPoolGameArgs['obj']['getGameEndTime()uint64'] | AiPoolGameArgs['tuple']['getGameEndTime()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getGameEndTime(params)))
        resultMappers.push((v) => client.decodeReturnValue('getGameEndTime()uint64', v))
        return this
      },
      /**
       * Add a getHumanStake()uint64 method call against the AiPoolGame contract
       */
      getHumanStake(params: CallParams<AiPoolGameArgs['obj']['getHumanStake()uint64'] | AiPoolGameArgs['tuple']['getHumanStake()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getHumanStake(params)))
        resultMappers.push((v) => client.decodeReturnValue('getHumanStake()uint64', v))
        return this
      },
      /**
       * Add a getBotCount()uint64 method call against the AiPoolGame contract
       */
      getBotCount(params: CallParams<AiPoolGameArgs['obj']['getBotCount()uint64'] | AiPoolGameArgs['tuple']['getBotCount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getBotCount(params)))
        resultMappers.push((v) => client.decodeReturnValue('getBotCount()uint64', v))
        return this
      },
      /**
       * Add a getGameRound()uint64 method call against the AiPoolGame contract
       */
      getGameRound(params: CallParams<AiPoolGameArgs['obj']['getGameRound()uint64'] | AiPoolGameArgs['tuple']['getGameRound()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getGameRound(params)))
        resultMappers.push((v) => client.decodeReturnValue('getGameRound()uint64', v))
        return this
      },
      /**
       * Add a calculatePotentialWinnings()uint64 method call against the AiPoolGame contract
       */
      calculatePotentialWinnings(params: CallParams<AiPoolGameArgs['obj']['calculatePotentialWinnings()uint64'] | AiPoolGameArgs['tuple']['calculatePotentialWinnings()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calculatePotentialWinnings(params)))
        resultMappers.push((v) => client.decodeReturnValue('calculatePotentialWinnings()uint64', v))
        return this
      },
      /**
       * Add a calculateBotStakePerBot()uint64 method call against the AiPoolGame contract
       */
      calculateBotStakePerBot(params: CallParams<AiPoolGameArgs['obj']['calculateBotStakePerBot()uint64'] | AiPoolGameArgs['tuple']['calculateBotStakePerBot()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calculateBotStakePerBot(params)))
        resultMappers.push((v) => client.decodeReturnValue('calculateBotStakePerBot()uint64', v))
        return this
      },
      /**
       * Add a emergencyWithdraw()void method call against the AiPoolGame contract
       */
      emergencyWithdraw(params: CallParams<AiPoolGameArgs['obj']['emergencyWithdraw()void'] | AiPoolGameArgs['tuple']['emergencyWithdraw()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.emergencyWithdraw(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the AiPoolGame contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as AiPoolGameComposer
  }
}
export type AiPoolGameComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the init(byte[],account,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  init(params?: CallParams<AiPoolGameArgs['obj']['init(byte[],account,uint64,uint64)void'] | AiPoolGameArgs['tuple']['init(byte[],account,uint64,uint64)void']>): AiPoolGameComposer<[...TReturns, AiPoolGameReturns['init(byte[],account,uint64,uint64)void'] | undefined]>

  /**
   * Calls the fundPool(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  fundPool(params?: CallParams<AiPoolGameArgs['obj']['fundPool(uint64)void'] | AiPoolGameArgs['tuple']['fundPool(uint64)void']>): AiPoolGameComposer<[...TReturns, AiPoolGameReturns['fundPool(uint64)void'] | undefined]>

  /**
   * Calls the joinGame(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  joinGame(params?: CallParams<AiPoolGameArgs['obj']['joinGame(uint64,uint64)void'] | AiPoolGameArgs['tuple']['joinGame(uint64,uint64)void']>): AiPoolGameComposer<[...TReturns, AiPoolGameReturns['joinGame(uint64,uint64)void'] | undefined]>

  /**
   * Calls the startGame()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  startGame(params?: CallParams<AiPoolGameArgs['obj']['startGame()void'] | AiPoolGameArgs['tuple']['startGame()void']>): AiPoolGameComposer<[...TReturns, AiPoolGameReturns['startGame()void'] | undefined]>

  /**
   * Calls the endGame(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  endGame(params?: CallParams<AiPoolGameArgs['obj']['endGame(uint64)void'] | AiPoolGameArgs['tuple']['endGame(uint64)void']>): AiPoolGameComposer<[...TReturns, AiPoolGameReturns['endGame(uint64)void'] | undefined]>

  /**
   * Calls the claimRefund()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimRefund(params?: CallParams<AiPoolGameArgs['obj']['claimRefund()void'] | AiPoolGameArgs['tuple']['claimRefund()void']>): AiPoolGameComposer<[...TReturns, AiPoolGameReturns['claimRefund()void'] | undefined]>

  /**
   * Calls the resetGame()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  resetGame(params?: CallParams<AiPoolGameArgs['obj']['resetGame()void'] | AiPoolGameArgs['tuple']['resetGame()void']>): AiPoolGameComposer<[...TReturns, AiPoolGameReturns['resetGame()void'] | undefined]>

  /**
   * Calls the getGameId()byte[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getGameId(params?: CallParams<AiPoolGameArgs['obj']['getGameId()byte[]'] | AiPoolGameArgs['tuple']['getGameId()byte[]']>): AiPoolGameComposer<[...TReturns, AiPoolGameReturns['getGameId()byte[]'] | undefined]>

  /**
   * Calls the getGameStatus()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getGameStatus(params?: CallParams<AiPoolGameArgs['obj']['getGameStatus()uint64'] | AiPoolGameArgs['tuple']['getGameStatus()uint64']>): AiPoolGameComposer<[...TReturns, AiPoolGameReturns['getGameStatus()uint64'] | undefined]>

  /**
   * Calls the getMinStake()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getMinStake(params?: CallParams<AiPoolGameArgs['obj']['getMinStake()uint64'] | AiPoolGameArgs['tuple']['getMinStake()uint64']>): AiPoolGameComposer<[...TReturns, AiPoolGameReturns['getMinStake()uint64'] | undefined]>

  /**
   * Calls the getMaxBots()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getMaxBots(params?: CallParams<AiPoolGameArgs['obj']['getMaxBots()uint64'] | AiPoolGameArgs['tuple']['getMaxBots()uint64']>): AiPoolGameComposer<[...TReturns, AiPoolGameReturns['getMaxBots()uint64'] | undefined]>

  /**
   * Calls the getTotalPool()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTotalPool(params?: CallParams<AiPoolGameArgs['obj']['getTotalPool()uint64'] | AiPoolGameArgs['tuple']['getTotalPool()uint64']>): AiPoolGameComposer<[...TReturns, AiPoolGameReturns['getTotalPool()uint64'] | undefined]>

  /**
   * Calls the getCurrentGamePool()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getCurrentGamePool(params?: CallParams<AiPoolGameArgs['obj']['getCurrentGamePool()uint64'] | AiPoolGameArgs['tuple']['getCurrentGamePool()uint64']>): AiPoolGameComposer<[...TReturns, AiPoolGameReturns['getCurrentGamePool()uint64'] | undefined]>

  /**
   * Calls the getGameStartTime()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getGameStartTime(params?: CallParams<AiPoolGameArgs['obj']['getGameStartTime()uint64'] | AiPoolGameArgs['tuple']['getGameStartTime()uint64']>): AiPoolGameComposer<[...TReturns, AiPoolGameReturns['getGameStartTime()uint64'] | undefined]>

  /**
   * Calls the getGameEndTime()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getGameEndTime(params?: CallParams<AiPoolGameArgs['obj']['getGameEndTime()uint64'] | AiPoolGameArgs['tuple']['getGameEndTime()uint64']>): AiPoolGameComposer<[...TReturns, AiPoolGameReturns['getGameEndTime()uint64'] | undefined]>

  /**
   * Calls the getHumanStake()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getHumanStake(params?: CallParams<AiPoolGameArgs['obj']['getHumanStake()uint64'] | AiPoolGameArgs['tuple']['getHumanStake()uint64']>): AiPoolGameComposer<[...TReturns, AiPoolGameReturns['getHumanStake()uint64'] | undefined]>

  /**
   * Calls the getBotCount()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getBotCount(params?: CallParams<AiPoolGameArgs['obj']['getBotCount()uint64'] | AiPoolGameArgs['tuple']['getBotCount()uint64']>): AiPoolGameComposer<[...TReturns, AiPoolGameReturns['getBotCount()uint64'] | undefined]>

  /**
   * Calls the getGameRound()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getGameRound(params?: CallParams<AiPoolGameArgs['obj']['getGameRound()uint64'] | AiPoolGameArgs['tuple']['getGameRound()uint64']>): AiPoolGameComposer<[...TReturns, AiPoolGameReturns['getGameRound()uint64'] | undefined]>

  /**
   * Calls the calculatePotentialWinnings()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculatePotentialWinnings(params?: CallParams<AiPoolGameArgs['obj']['calculatePotentialWinnings()uint64'] | AiPoolGameArgs['tuple']['calculatePotentialWinnings()uint64']>): AiPoolGameComposer<[...TReturns, AiPoolGameReturns['calculatePotentialWinnings()uint64'] | undefined]>

  /**
   * Calls the calculateBotStakePerBot()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateBotStakePerBot(params?: CallParams<AiPoolGameArgs['obj']['calculateBotStakePerBot()uint64'] | AiPoolGameArgs['tuple']['calculateBotStakePerBot()uint64']>): AiPoolGameComposer<[...TReturns, AiPoolGameReturns['calculateBotStakePerBot()uint64'] | undefined]>

  /**
   * Calls the emergencyWithdraw()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  emergencyWithdraw(params?: CallParams<AiPoolGameArgs['obj']['emergencyWithdraw()void'] | AiPoolGameArgs['tuple']['emergencyWithdraw()void']>): AiPoolGameComposer<[...TReturns, AiPoolGameReturns['emergencyWithdraw()void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the AiPoolGame smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): AiPoolGameComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): AiPoolGameComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AiPoolGameComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<AiPoolGameComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<AiPoolGameComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<AiPoolGameComposerResults<TReturns>>
}
export type AiPoolGameComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

