/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"PublishRegistry","structs":{},"methods":[{"name":"register","args":[{"type":"byte[]","name":"gameCid"},{"type":"byte[]","name":"version"},{"type":"byte[]","name":"owner"},{"type":"byte[]","name":"parentCid"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getGameInfo","args":[{"type":"byte[]","name":"gameCid"}],"returns":{"type":"(byte[],byte[],byte[],uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"getParentCid","args":[{"type":"byte[]","name":"gameCid"}],"returns":{"type":"byte[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"isOwner","args":[{"type":"byte[]","name":"gameCid"},{"type":"byte[]","name":"address"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":1,"bytes":4},"local":{"ints":0,"bytes":0}},"keys":{"global":{"gameCid":{"keyType":"AVMString","valueType":"AVMBytes","key":"Z2FtZUNpZA=="},"version":{"keyType":"AVMString","valueType":"AVMBytes","key":"dmVyc2lvbg=="},"owner":{"keyType":"AVMString","valueType":"AVMBytes","key":"b3duZXI="},"parentCid":{"keyType":"AVMString","valueType":"AVMBytes","key":"cGFyZW50Q2lk"},"timestamp":{"keyType":"AVMString","valueType":"AVMUint64","key":"dGltZXN0YW1w"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[99,134,164,257],"errorMessage":"OnCompletion is not NoOp"},{"pc":[298],"errorMessage":"can only call when creating"},{"pc":[102,137,167,260],"errorMessage":"can only call when not creating"},{"pc":[332,349,353,357,362,370,383,391,403],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiACAAEmBgdnYW1lQ2lkBBUffHUFb3duZXIJcGFyZW50Q2lkB3ZlcnNpb24JdGltZXN0YW1wMRtBAOeCBATexWvPBBvjgjYEsNStmwTUpcV4NhoAjgQAoABDACUAAiJDMRkURDEYRDYaAVcCADYaAlcCAIgBC4ABACJPAlQpTFCwI0MxGRREMRhENhoBVwIAiADZSRUWVwYCTFApTFCwI0MxGRREMRhENhoBVwIAiACVSwMVFlcGAk8EUEsDFRZXBgJPBFBLAxUWVwYCTwRQTwMWSwMVgQ4ISRZXBgKAAgAOTFBLBBVPAggWVwYCUExQTwNQTwJQTFApTFCwI0MxGRREMRhENhoBVwIANhoCVwIANhoDVwIANhoEVwIAiAANI0MxGUD/NzEYFEQjQ4oEACiL/GcnBIv9ZyqL/mcri/9nJwUiZ4mKAQQiKGVEi/8TQQAGgABHAiKJIicEZUQiKmVEIitlRCInBWVEiYoBASIoZUSL/xNBAAOAAIkiK2VEiYoCASIoZUSL/hNBAAIiiSIqZUSL/xKJ","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the PublishRegistry contract
 */
export type PublishRegistryArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'register(byte[],byte[],byte[],byte[])void': {
      gameCid: Uint8Array
      version: Uint8Array
      owner: Uint8Array
      parentCid: Uint8Array
    }
    'getGameInfo(byte[])(byte[],byte[],byte[],uint64)': {
      gameCid: Uint8Array
    }
    'getParentCid(byte[])byte[]': {
      gameCid: Uint8Array
    }
    'isOwner(byte[],byte[])bool': {
      gameCid: Uint8Array
      address: Uint8Array
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'register(byte[],byte[],byte[],byte[])void': [gameCid: Uint8Array, version: Uint8Array, owner: Uint8Array, parentCid: Uint8Array]
    'getGameInfo(byte[])(byte[],byte[],byte[],uint64)': [gameCid: Uint8Array]
    'getParentCid(byte[])byte[]': [gameCid: Uint8Array]
    'isOwner(byte[],byte[])bool': [gameCid: Uint8Array, address: Uint8Array]
  }
}

/**
 * The return type for each method
 */
export type PublishRegistryReturns = {
  'register(byte[],byte[],byte[],byte[])void': void
  'getGameInfo(byte[])(byte[],byte[],byte[],uint64)': [Uint8Array, Uint8Array, Uint8Array, bigint]
  'getParentCid(byte[])byte[]': Uint8Array
  'isOwner(byte[],byte[])bool': boolean
}

/**
 * Defines the types of available calls and state of the PublishRegistry smart contract.
 */
export type PublishRegistryTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'register(byte[],byte[],byte[],byte[])void' | 'register', {
      argsObj: PublishRegistryArgs['obj']['register(byte[],byte[],byte[],byte[])void']
      argsTuple: PublishRegistryArgs['tuple']['register(byte[],byte[],byte[],byte[])void']
      returns: PublishRegistryReturns['register(byte[],byte[],byte[],byte[])void']
    }>
    & Record<'getGameInfo(byte[])(byte[],byte[],byte[],uint64)' | 'getGameInfo', {
      argsObj: PublishRegistryArgs['obj']['getGameInfo(byte[])(byte[],byte[],byte[],uint64)']
      argsTuple: PublishRegistryArgs['tuple']['getGameInfo(byte[])(byte[],byte[],byte[],uint64)']
      returns: PublishRegistryReturns['getGameInfo(byte[])(byte[],byte[],byte[],uint64)']
    }>
    & Record<'getParentCid(byte[])byte[]' | 'getParentCid', {
      argsObj: PublishRegistryArgs['obj']['getParentCid(byte[])byte[]']
      argsTuple: PublishRegistryArgs['tuple']['getParentCid(byte[])byte[]']
      returns: PublishRegistryReturns['getParentCid(byte[])byte[]']
    }>
    & Record<'isOwner(byte[],byte[])bool' | 'isOwner', {
      argsObj: PublishRegistryArgs['obj']['isOwner(byte[],byte[])bool']
      argsTuple: PublishRegistryArgs['tuple']['isOwner(byte[],byte[])bool']
      returns: PublishRegistryReturns['isOwner(byte[],byte[])bool']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        gameCid: BinaryState
        version: BinaryState
        owner: BinaryState
        parentCid: BinaryState
        timestamp: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type PublishRegistrySignatures = keyof PublishRegistryTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type PublishRegistryNonVoidMethodSignatures = keyof PublishRegistryTypes['methods'] extends infer T ? T extends keyof PublishRegistryTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the PublishRegistry smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends PublishRegistrySignatures> = PublishRegistryTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the PublishRegistry smart contract to the method's return type
 */
export type MethodReturn<TSignature extends PublishRegistrySignatures> = PublishRegistryTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = PublishRegistryTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type PublishRegistryCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type PublishRegistryDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: PublishRegistryCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the PublishRegistry smart contract
 */
export abstract class PublishRegistryParamsFactory {
  /**
   * Constructs a no op call for the register(byte[],byte[],byte[],byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static register(params: CallParams<PublishRegistryArgs['obj']['register(byte[],byte[],byte[],byte[])void'] | PublishRegistryArgs['tuple']['register(byte[],byte[],byte[],byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'register(byte[],byte[],byte[],byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameCid, params.args.version, params.args.owner, params.args.parentCid],
    }
  }
  /**
   * Constructs a no op call for the getGameInfo(byte[])(byte[],byte[],byte[],uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getGameInfo(params: CallParams<PublishRegistryArgs['obj']['getGameInfo(byte[])(byte[],byte[],byte[],uint64)'] | PublishRegistryArgs['tuple']['getGameInfo(byte[])(byte[],byte[],byte[],uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getGameInfo(byte[])(byte[],byte[],byte[],uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameCid],
    }
  }
  /**
   * Constructs a no op call for the getParentCid(byte[])byte[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getParentCid(params: CallParams<PublishRegistryArgs['obj']['getParentCid(byte[])byte[]'] | PublishRegistryArgs['tuple']['getParentCid(byte[])byte[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getParentCid(byte[])byte[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameCid],
    }
  }
  /**
   * Constructs a no op call for the isOwner(byte[],byte[])bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static isOwner(params: CallParams<PublishRegistryArgs['obj']['isOwner(byte[],byte[])bool'] | PublishRegistryArgs['tuple']['isOwner(byte[],byte[])bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'isOwner(byte[],byte[])bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameCid, params.args.address],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the PublishRegistry smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class PublishRegistryFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `PublishRegistryFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new PublishRegistryClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new PublishRegistryClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the PublishRegistry smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: PublishRegistryDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new PublishRegistryClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PublishRegistry smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PublishRegistry smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PublishRegistry smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new PublishRegistryClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the PublishRegistry smart contract
 */
export class PublishRegistryClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `PublishRegistryClient`
   *
   * @param appClient An `AppClient` instance which has been created with the PublishRegistry app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `PublishRegistryClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends PublishRegistryNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `PublishRegistryClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<PublishRegistryClient> {
    return new PublishRegistryClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `PublishRegistryClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<PublishRegistryClient> {
    return new PublishRegistryClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the PublishRegistry smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the PublishRegistry smart contract using the `register(byte[],byte[],byte[],byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    register: (params: CallParams<PublishRegistryArgs['obj']['register(byte[],byte[],byte[],byte[])void'] | PublishRegistryArgs['tuple']['register(byte[],byte[],byte[],byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PublishRegistryParamsFactory.register(params))
    },

    /**
     * Makes a call to the PublishRegistry smart contract using the `getGameInfo(byte[])(byte[],byte[],byte[],uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getGameInfo: (params: CallParams<PublishRegistryArgs['obj']['getGameInfo(byte[])(byte[],byte[],byte[],uint64)'] | PublishRegistryArgs['tuple']['getGameInfo(byte[])(byte[],byte[],byte[],uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PublishRegistryParamsFactory.getGameInfo(params))
    },

    /**
     * Makes a call to the PublishRegistry smart contract using the `getParentCid(byte[])byte[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getParentCid: (params: CallParams<PublishRegistryArgs['obj']['getParentCid(byte[])byte[]'] | PublishRegistryArgs['tuple']['getParentCid(byte[])byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PublishRegistryParamsFactory.getParentCid(params))
    },

    /**
     * Makes a call to the PublishRegistry smart contract using the `isOwner(byte[],byte[])bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    isOwner: (params: CallParams<PublishRegistryArgs['obj']['isOwner(byte[],byte[])bool'] | PublishRegistryArgs['tuple']['isOwner(byte[],byte[])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PublishRegistryParamsFactory.isOwner(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the PublishRegistry smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the PublishRegistry smart contract using the `register(byte[],byte[],byte[],byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    register: (params: CallParams<PublishRegistryArgs['obj']['register(byte[],byte[],byte[],byte[])void'] | PublishRegistryArgs['tuple']['register(byte[],byte[],byte[],byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PublishRegistryParamsFactory.register(params))
    },

    /**
     * Makes a call to the PublishRegistry smart contract using the `getGameInfo(byte[])(byte[],byte[],byte[],uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getGameInfo: (params: CallParams<PublishRegistryArgs['obj']['getGameInfo(byte[])(byte[],byte[],byte[],uint64)'] | PublishRegistryArgs['tuple']['getGameInfo(byte[])(byte[],byte[],byte[],uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PublishRegistryParamsFactory.getGameInfo(params))
    },

    /**
     * Makes a call to the PublishRegistry smart contract using the `getParentCid(byte[])byte[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getParentCid: (params: CallParams<PublishRegistryArgs['obj']['getParentCid(byte[])byte[]'] | PublishRegistryArgs['tuple']['getParentCid(byte[])byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PublishRegistryParamsFactory.getParentCid(params))
    },

    /**
     * Makes a call to the PublishRegistry smart contract using the `isOwner(byte[],byte[])bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    isOwner: (params: CallParams<PublishRegistryArgs['obj']['isOwner(byte[],byte[])bool'] | PublishRegistryArgs['tuple']['isOwner(byte[],byte[])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PublishRegistryParamsFactory.isOwner(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the PublishRegistry smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the PublishRegistry smart contract using the `register(byte[],byte[],byte[],byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    register: async (params: CallParams<PublishRegistryArgs['obj']['register(byte[],byte[],byte[],byte[])void'] | PublishRegistryArgs['tuple']['register(byte[],byte[],byte[],byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PublishRegistryParamsFactory.register(params))
      return {...result, return: result.return as unknown as (undefined | PublishRegistryReturns['register(byte[],byte[],byte[],byte[])void'])}
    },

    /**
     * Makes a call to the PublishRegistry smart contract using the `getGameInfo(byte[])(byte[],byte[],byte[],uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getGameInfo: async (params: CallParams<PublishRegistryArgs['obj']['getGameInfo(byte[])(byte[],byte[],byte[],uint64)'] | PublishRegistryArgs['tuple']['getGameInfo(byte[])(byte[],byte[],byte[],uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PublishRegistryParamsFactory.getGameInfo(params))
      return {...result, return: result.return as unknown as (undefined | PublishRegistryReturns['getGameInfo(byte[])(byte[],byte[],byte[],uint64)'])}
    },

    /**
     * Makes a call to the PublishRegistry smart contract using the `getParentCid(byte[])byte[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getParentCid: async (params: CallParams<PublishRegistryArgs['obj']['getParentCid(byte[])byte[]'] | PublishRegistryArgs['tuple']['getParentCid(byte[])byte[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PublishRegistryParamsFactory.getParentCid(params))
      return {...result, return: result.return as unknown as (undefined | PublishRegistryReturns['getParentCid(byte[])byte[]'])}
    },

    /**
     * Makes a call to the PublishRegistry smart contract using the `isOwner(byte[],byte[])bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    isOwner: async (params: CallParams<PublishRegistryArgs['obj']['isOwner(byte[],byte[])bool'] | PublishRegistryArgs['tuple']['isOwner(byte[],byte[])bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PublishRegistryParamsFactory.isOwner(params))
      return {...result, return: result.return as unknown as (undefined | PublishRegistryReturns['isOwner(byte[],byte[])bool'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new PublishRegistryClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the PublishRegistry smart contract using the `getGameInfo(byte[])(byte[],byte[],byte[],uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getGameInfo(params: CallParams<PublishRegistryArgs['obj']['getGameInfo(byte[])(byte[],byte[],byte[],uint64)'] | PublishRegistryArgs['tuple']['getGameInfo(byte[])(byte[],byte[],byte[],uint64)']>) {
    const result = await this.appClient.send.call(PublishRegistryParamsFactory.getGameInfo(params))
    return result.return as unknown as PublishRegistryReturns['getGameInfo(byte[])(byte[],byte[],byte[],uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the PublishRegistry smart contract using the `getParentCid(byte[])byte[]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getParentCid(params: CallParams<PublishRegistryArgs['obj']['getParentCid(byte[])byte[]'] | PublishRegistryArgs['tuple']['getParentCid(byte[])byte[]']>) {
    const result = await this.appClient.send.call(PublishRegistryParamsFactory.getParentCid(params))
    return result.return as unknown as PublishRegistryReturns['getParentCid(byte[])byte[]']
  }

  /**
   * Makes a readonly (simulated) call to the PublishRegistry smart contract using the `isOwner(byte[],byte[])bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async isOwner(params: CallParams<PublishRegistryArgs['obj']['isOwner(byte[],byte[])bool'] | PublishRegistryArgs['tuple']['isOwner(byte[],byte[])bool']>) {
    const result = await this.appClient.send.call(PublishRegistryParamsFactory.isOwner(params))
    return result.return as unknown as PublishRegistryReturns['isOwner(byte[],byte[])bool']
  }

  /**
   * Methods to access state for the current PublishRegistry app
   */
  state = {
    /**
     * Methods to access global state for the current PublishRegistry app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          gameCid: new BinaryStateValue(result.gameCid),
          version: new BinaryStateValue(result.version),
          owner: new BinaryStateValue(result.owner),
          parentCid: new BinaryStateValue(result.parentCid),
          timestamp: result.timestamp,
        }
      },
      /**
       * Get the current value of the gameCid key in global state
       */
      gameCid: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("gameCid")) as Uint8Array | undefined) },
      /**
       * Get the current value of the version key in global state
       */
      version: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("version")) as Uint8Array | undefined) },
      /**
       * Get the current value of the owner key in global state
       */
      owner: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("owner")) as Uint8Array | undefined) },
      /**
       * Get the current value of the parentCid key in global state
       */
      parentCid: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("parentCid")) as Uint8Array | undefined) },
      /**
       * Get the current value of the timestamp key in global state
       */
      timestamp: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("timestamp")) as bigint | undefined },
    },
  }

  public newGroup(): PublishRegistryComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a register(byte[],byte[],byte[],byte[])void method call against the PublishRegistry contract
       */
      register(params: CallParams<PublishRegistryArgs['obj']['register(byte[],byte[],byte[],byte[])void'] | PublishRegistryArgs['tuple']['register(byte[],byte[],byte[],byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.register(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getGameInfo(byte[])(byte[],byte[],byte[],uint64) method call against the PublishRegistry contract
       */
      getGameInfo(params: CallParams<PublishRegistryArgs['obj']['getGameInfo(byte[])(byte[],byte[],byte[],uint64)'] | PublishRegistryArgs['tuple']['getGameInfo(byte[])(byte[],byte[],byte[],uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getGameInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('getGameInfo(byte[])(byte[],byte[],byte[],uint64)', v))
        return this
      },
      /**
       * Add a getParentCid(byte[])byte[] method call against the PublishRegistry contract
       */
      getParentCid(params: CallParams<PublishRegistryArgs['obj']['getParentCid(byte[])byte[]'] | PublishRegistryArgs['tuple']['getParentCid(byte[])byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getParentCid(params)))
        resultMappers.push((v) => client.decodeReturnValue('getParentCid(byte[])byte[]', v))
        return this
      },
      /**
       * Add a isOwner(byte[],byte[])bool method call against the PublishRegistry contract
       */
      isOwner(params: CallParams<PublishRegistryArgs['obj']['isOwner(byte[],byte[])bool'] | PublishRegistryArgs['tuple']['isOwner(byte[],byte[])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.isOwner(params)))
        resultMappers.push((v) => client.decodeReturnValue('isOwner(byte[],byte[])bool', v))
        return this
      },
      /**
       * Add a clear state call to the PublishRegistry contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as PublishRegistryComposer
  }
}
export type PublishRegistryComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the register(byte[],byte[],byte[],byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  register(params?: CallParams<PublishRegistryArgs['obj']['register(byte[],byte[],byte[],byte[])void'] | PublishRegistryArgs['tuple']['register(byte[],byte[],byte[],byte[])void']>): PublishRegistryComposer<[...TReturns, PublishRegistryReturns['register(byte[],byte[],byte[],byte[])void'] | undefined]>

  /**
   * Calls the getGameInfo(byte[])(byte[],byte[],byte[],uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getGameInfo(params?: CallParams<PublishRegistryArgs['obj']['getGameInfo(byte[])(byte[],byte[],byte[],uint64)'] | PublishRegistryArgs['tuple']['getGameInfo(byte[])(byte[],byte[],byte[],uint64)']>): PublishRegistryComposer<[...TReturns, PublishRegistryReturns['getGameInfo(byte[])(byte[],byte[],byte[],uint64)'] | undefined]>

  /**
   * Calls the getParentCid(byte[])byte[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getParentCid(params?: CallParams<PublishRegistryArgs['obj']['getParentCid(byte[])byte[]'] | PublishRegistryArgs['tuple']['getParentCid(byte[])byte[]']>): PublishRegistryComposer<[...TReturns, PublishRegistryReturns['getParentCid(byte[])byte[]'] | undefined]>

  /**
   * Calls the isOwner(byte[],byte[])bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  isOwner(params?: CallParams<PublishRegistryArgs['obj']['isOwner(byte[],byte[])bool'] | PublishRegistryArgs['tuple']['isOwner(byte[],byte[])bool']>): PublishRegistryComposer<[...TReturns, PublishRegistryReturns['isOwner(byte[],byte[])bool'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the PublishRegistry smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): PublishRegistryComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): PublishRegistryComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<PublishRegistryComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<PublishRegistryComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<PublishRegistryComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<PublishRegistryComposerResults<TReturns>>
}
export type PublishRegistryComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

