/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"AiPoolGameV2","structs":{},"methods":[{"name":"init","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"fundPool","args":[{"type":"uint64","name":"amount"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"joinGame","args":[{"type":"uint64","name":"stake"},{"type":"uint64","name":"botCount"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"endGame","args":[{"type":"uint64","name":"humanWon"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"resetGame","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"emergencyWithdraw","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getTotalPool","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"getGameStatus","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"getWinner","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":6,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"owner":{"keyType":"AVMString","valueType":"address","key":"b3duZXI="},"gameStatus":{"keyType":"AVMString","valueType":"AVMUint64","key":"Z2FtZVN0YXR1cw=="},"totalPool":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxQb29s"},"humanStake":{"keyType":"AVMString","valueType":"AVMUint64","key":"aHVtYW5TdGFrZQ=="},"botCount":{"keyType":"AVMString","valueType":"AVMUint64","key":"Ym90Q291bnQ="},"currentGamePool":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y3VycmVudEdhbWVQb29s"},"winner":{"keyType":"AVMString","valueType":"AVMUint64","key":"d2lubmVy"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[373],"errorMessage":"Game already started"},{"pc":[353],"errorMessage":"Game must be waiting"},{"pc":[618],"errorMessage":"Game must be waiting or active"},{"pc":[573],"errorMessage":"Game not finished yet"},{"pc":[453],"errorMessage":"Invalid winner flag: 0=bots, 1=human, 2=draw"},{"pc":[432],"errorMessage":"No active game"},{"pc":[389],"errorMessage":"Not enough pool funds"},{"pc":[190,208,226,244,256,268,284,304,320],"errorMessage":"OnCompletion is not NoOp"},{"pc":[347],"errorMessage":"Only owner can fund"},{"pc":[566],"errorMessage":"Only owner can reset"},{"pc":[600],"errorMessage":"Only owner can withdraw"},{"pc":[376],"errorMessage":"Stake must be > 0"},{"pc":[324],"errorMessage":"can only call when creating"},{"pc":[193,211,229,247,259,271,287,307],"errorMessage":"can only call when not creating"},{"pc":[345,351,357,371,385,393,429,468,495,500,517,533,537,542,564,570,598,604,611,622,631,635,654,664,681,685,726,731,736],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAEAAEC6AcmCAl0b3RhbFBvb2wKZ2FtZVN0YXR1cwpodW1hblN0YWtlBndpbm5lcg9jdXJyZW50R2FtZVBvb2wFb3duZXIIYm90Q291bnQEFR98dTEYQAAUKSJnKCJnKiJnJwYiZycEImcrImcxG0EARoIJBIPxR0gE9iIWQgS52IrpBCMcFDsEUsSUoARe0iWJBO5A9xwEnZTk3QRYBXVgNhoAjgkAhAB0AGAAUABEADgAJgAUAAIiQzEZFEQxGESIAhgWJwdMULAjQzEZFEQxGESIAgEWJwdMULAjQzEZFEQxGESIAeoWJwdMULAjQzEZFEQxGESIAVUjQzEZFEQxGESIAScjQzEZFEQxGEQ2GgEXiACQI0MxGRREMRhENhoBFzYaAheIAEIjQzEZFEQxGEQ2GgEXiAAVI0MxGRREMRgURIgAAiNDJwUxAGeJigEAMQAiJwVlRBJEIillRBREIihlRIv/CChMZ4mKAgAiKWVEFESL/kSL/ov/CyIoZURLAQ9EIihlREsBCShMZyqL/mcnBov/Z4v+CCcETGcpI2crImeJigEAIillRCMSRIv/QQAOi/8jEkAAB4v/JBJBAGYjRIv/IxJBABqxMQAiJwRlRLIIsgcjshAlsgGzKyNnKSRniYv/QAATIihlRCInBGVECChMZyskZ0L/5LExACIqZUSyCLIHI7IQJbIBsyInBGVEIiplRAkiKGVECChMZyuBA2dC/7kiQv+XMQAiJwVlRBJEIillRCQSRCkiZyoiZycGImcnBCJnKyJniTEAIicFZUQSRCIpZURBAAkiKWVEIxJBAGYjRCIpZURAABmxIicFZUQiKGVEsgiyByOyECWyAbMoImeJIiplREEAErExACIqZUSyCLIHI7IQJbIBs7EiJwVlRCIoZUSyCLIHI7IQJbIBsykkZygiZyoiZycGImcnBCJnK4EDZ4kiQv+XIihlRIkiKWVEiSIrZUSJ","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the AiPoolGameV2 contract
 */
export type AiPoolGameV2Args = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'init()void': Record<string, never>
    'fundPool(uint64)void': {
      amount: bigint | number
    }
    'joinGame(uint64,uint64)void': {
      stake: bigint | number
      botCount: bigint | number
    }
    'endGame(uint64)void': {
      humanWon: bigint | number
    }
    'resetGame()void': Record<string, never>
    'emergencyWithdraw()void': Record<string, never>
    'getTotalPool()uint64': Record<string, never>
    'getGameStatus()uint64': Record<string, never>
    'getWinner()uint64': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'init()void': []
    'fundPool(uint64)void': [amount: bigint | number]
    'joinGame(uint64,uint64)void': [stake: bigint | number, botCount: bigint | number]
    'endGame(uint64)void': [humanWon: bigint | number]
    'resetGame()void': []
    'emergencyWithdraw()void': []
    'getTotalPool()uint64': []
    'getGameStatus()uint64': []
    'getWinner()uint64': []
  }
}

/**
 * The return type for each method
 */
export type AiPoolGameV2Returns = {
  'init()void': void
  'fundPool(uint64)void': void
  'joinGame(uint64,uint64)void': void
  'endGame(uint64)void': void
  'resetGame()void': void
  'emergencyWithdraw()void': void
  'getTotalPool()uint64': bigint
  'getGameStatus()uint64': bigint
  'getWinner()uint64': bigint
}

/**
 * Defines the types of available calls and state of the AiPoolGameV2 smart contract.
 */
export type AiPoolGameV2Types = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'init()void' | 'init', {
      argsObj: AiPoolGameV2Args['obj']['init()void']
      argsTuple: AiPoolGameV2Args['tuple']['init()void']
      returns: AiPoolGameV2Returns['init()void']
    }>
    & Record<'fundPool(uint64)void' | 'fundPool', {
      argsObj: AiPoolGameV2Args['obj']['fundPool(uint64)void']
      argsTuple: AiPoolGameV2Args['tuple']['fundPool(uint64)void']
      returns: AiPoolGameV2Returns['fundPool(uint64)void']
    }>
    & Record<'joinGame(uint64,uint64)void' | 'joinGame', {
      argsObj: AiPoolGameV2Args['obj']['joinGame(uint64,uint64)void']
      argsTuple: AiPoolGameV2Args['tuple']['joinGame(uint64,uint64)void']
      returns: AiPoolGameV2Returns['joinGame(uint64,uint64)void']
    }>
    & Record<'endGame(uint64)void' | 'endGame', {
      argsObj: AiPoolGameV2Args['obj']['endGame(uint64)void']
      argsTuple: AiPoolGameV2Args['tuple']['endGame(uint64)void']
      returns: AiPoolGameV2Returns['endGame(uint64)void']
    }>
    & Record<'resetGame()void' | 'resetGame', {
      argsObj: AiPoolGameV2Args['obj']['resetGame()void']
      argsTuple: AiPoolGameV2Args['tuple']['resetGame()void']
      returns: AiPoolGameV2Returns['resetGame()void']
    }>
    & Record<'emergencyWithdraw()void' | 'emergencyWithdraw', {
      argsObj: AiPoolGameV2Args['obj']['emergencyWithdraw()void']
      argsTuple: AiPoolGameV2Args['tuple']['emergencyWithdraw()void']
      returns: AiPoolGameV2Returns['emergencyWithdraw()void']
    }>
    & Record<'getTotalPool()uint64' | 'getTotalPool', {
      argsObj: AiPoolGameV2Args['obj']['getTotalPool()uint64']
      argsTuple: AiPoolGameV2Args['tuple']['getTotalPool()uint64']
      returns: AiPoolGameV2Returns['getTotalPool()uint64']
    }>
    & Record<'getGameStatus()uint64' | 'getGameStatus', {
      argsObj: AiPoolGameV2Args['obj']['getGameStatus()uint64']
      argsTuple: AiPoolGameV2Args['tuple']['getGameStatus()uint64']
      returns: AiPoolGameV2Returns['getGameStatus()uint64']
    }>
    & Record<'getWinner()uint64' | 'getWinner', {
      argsObj: AiPoolGameV2Args['obj']['getWinner()uint64']
      argsTuple: AiPoolGameV2Args['tuple']['getWinner()uint64']
      returns: AiPoolGameV2Returns['getWinner()uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        owner: string
        gameStatus: bigint
        totalPool: bigint
        humanStake: bigint
        botCount: bigint
        currentGamePool: bigint
        winner: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type AiPoolGameV2Signatures = keyof AiPoolGameV2Types['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type AiPoolGameV2NonVoidMethodSignatures = keyof AiPoolGameV2Types['methods'] extends infer T ? T extends keyof AiPoolGameV2Types['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the AiPoolGameV2 smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends AiPoolGameV2Signatures> = AiPoolGameV2Types['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AiPoolGameV2 smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AiPoolGameV2Signatures> = AiPoolGameV2Types['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = AiPoolGameV2Types['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type AiPoolGameV2CreateCallParams =
  | Expand<CallParams<AiPoolGameV2Args['obj']['init()void'] | AiPoolGameV2Args['tuple']['init()void']> & {method: 'init'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<AiPoolGameV2Args['obj']['init()void'] | AiPoolGameV2Args['tuple']['init()void']> & {method: 'init()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type AiPoolGameV2DeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: AiPoolGameV2CreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the AiPoolGameV2 smart contract
 */
export abstract class AiPoolGameV2ParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends AiPoolGameV2CreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'init':
          case 'init()void':
            return AiPoolGameV2ParamsFactory.create.init(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the AiPoolGameV2 smart contract using the init()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      init(params: CallParams<AiPoolGameV2Args['obj']['init()void'] | AiPoolGameV2Args['tuple']['init()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'init()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the fundPool(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static fundPool(params: CallParams<AiPoolGameV2Args['obj']['fundPool(uint64)void'] | AiPoolGameV2Args['tuple']['fundPool(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'fundPool(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the joinGame(uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static joinGame(params: CallParams<AiPoolGameV2Args['obj']['joinGame(uint64,uint64)void'] | AiPoolGameV2Args['tuple']['joinGame(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'joinGame(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.stake, params.args.botCount],
    }
  }
  /**
   * Constructs a no op call for the endGame(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static endGame(params: CallParams<AiPoolGameV2Args['obj']['endGame(uint64)void'] | AiPoolGameV2Args['tuple']['endGame(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'endGame(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.humanWon],
    }
  }
  /**
   * Constructs a no op call for the resetGame()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static resetGame(params: CallParams<AiPoolGameV2Args['obj']['resetGame()void'] | AiPoolGameV2Args['tuple']['resetGame()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'resetGame()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the emergencyWithdraw()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static emergencyWithdraw(params: CallParams<AiPoolGameV2Args['obj']['emergencyWithdraw()void'] | AiPoolGameV2Args['tuple']['emergencyWithdraw()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'emergencyWithdraw()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getTotalPool()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTotalPool(params: CallParams<AiPoolGameV2Args['obj']['getTotalPool()uint64'] | AiPoolGameV2Args['tuple']['getTotalPool()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTotalPool()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getGameStatus()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getGameStatus(params: CallParams<AiPoolGameV2Args['obj']['getGameStatus()uint64'] | AiPoolGameV2Args['tuple']['getGameStatus()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getGameStatus()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getWinner()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getWinner(params: CallParams<AiPoolGameV2Args['obj']['getWinner()uint64'] | AiPoolGameV2Args['tuple']['getWinner()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getWinner()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the AiPoolGameV2 smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class AiPoolGameV2Factory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `AiPoolGameV2Factory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new AiPoolGameV2Client(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new AiPoolGameV2Client(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the AiPoolGameV2 smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: AiPoolGameV2DeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? AiPoolGameV2ParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (AiPoolGameV2CreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new AiPoolGameV2Client(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AiPoolGameV2 smart contract using the init()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      init: (params: CallParams<AiPoolGameV2Args['obj']['init()void'] | AiPoolGameV2Args['tuple']['init()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(AiPoolGameV2ParamsFactory.create.init(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AiPoolGameV2 smart contract using the init()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      init: (params: CallParams<AiPoolGameV2Args['obj']['init()void'] | AiPoolGameV2Args['tuple']['init()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(AiPoolGameV2ParamsFactory.create.init(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AiPoolGameV2 smart contract using an ABI method call using the init()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      init: async (params: CallParams<AiPoolGameV2Args['obj']['init()void'] | AiPoolGameV2Args['tuple']['init()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(AiPoolGameV2ParamsFactory.create.init(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | AiPoolGameV2Returns['init()void']) }, appClient: new AiPoolGameV2Client(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the AiPoolGameV2 smart contract
 */
export class AiPoolGameV2Client {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `AiPoolGameV2Client`
   *
   * @param appClient An `AppClient` instance which has been created with the AiPoolGameV2 app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `AiPoolGameV2Client`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends AiPoolGameV2NonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `AiPoolGameV2Client` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<AiPoolGameV2Client> {
    return new AiPoolGameV2Client(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `AiPoolGameV2Client` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<AiPoolGameV2Client> {
    return new AiPoolGameV2Client(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the AiPoolGameV2 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the AiPoolGameV2 smart contract using the `fundPool(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    fundPool: (params: CallParams<AiPoolGameV2Args['obj']['fundPool(uint64)void'] | AiPoolGameV2Args['tuple']['fundPool(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AiPoolGameV2ParamsFactory.fundPool(params))
    },

    /**
     * Makes a call to the AiPoolGameV2 smart contract using the `joinGame(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    joinGame: (params: CallParams<AiPoolGameV2Args['obj']['joinGame(uint64,uint64)void'] | AiPoolGameV2Args['tuple']['joinGame(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AiPoolGameV2ParamsFactory.joinGame(params))
    },

    /**
     * Makes a call to the AiPoolGameV2 smart contract using the `endGame(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    endGame: (params: CallParams<AiPoolGameV2Args['obj']['endGame(uint64)void'] | AiPoolGameV2Args['tuple']['endGame(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AiPoolGameV2ParamsFactory.endGame(params))
    },

    /**
     * Makes a call to the AiPoolGameV2 smart contract using the `resetGame()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    resetGame: (params: CallParams<AiPoolGameV2Args['obj']['resetGame()void'] | AiPoolGameV2Args['tuple']['resetGame()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AiPoolGameV2ParamsFactory.resetGame(params))
    },

    /**
     * Makes a call to the AiPoolGameV2 smart contract using the `emergencyWithdraw()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    emergencyWithdraw: (params: CallParams<AiPoolGameV2Args['obj']['emergencyWithdraw()void'] | AiPoolGameV2Args['tuple']['emergencyWithdraw()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AiPoolGameV2ParamsFactory.emergencyWithdraw(params))
    },

    /**
     * Makes a call to the AiPoolGameV2 smart contract using the `getTotalPool()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTotalPool: (params: CallParams<AiPoolGameV2Args['obj']['getTotalPool()uint64'] | AiPoolGameV2Args['tuple']['getTotalPool()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AiPoolGameV2ParamsFactory.getTotalPool(params))
    },

    /**
     * Makes a call to the AiPoolGameV2 smart contract using the `getGameStatus()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getGameStatus: (params: CallParams<AiPoolGameV2Args['obj']['getGameStatus()uint64'] | AiPoolGameV2Args['tuple']['getGameStatus()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AiPoolGameV2ParamsFactory.getGameStatus(params))
    },

    /**
     * Makes a call to the AiPoolGameV2 smart contract using the `getWinner()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getWinner: (params: CallParams<AiPoolGameV2Args['obj']['getWinner()uint64'] | AiPoolGameV2Args['tuple']['getWinner()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AiPoolGameV2ParamsFactory.getWinner(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the AiPoolGameV2 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the AiPoolGameV2 smart contract using the `fundPool(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    fundPool: (params: CallParams<AiPoolGameV2Args['obj']['fundPool(uint64)void'] | AiPoolGameV2Args['tuple']['fundPool(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AiPoolGameV2ParamsFactory.fundPool(params))
    },

    /**
     * Makes a call to the AiPoolGameV2 smart contract using the `joinGame(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    joinGame: (params: CallParams<AiPoolGameV2Args['obj']['joinGame(uint64,uint64)void'] | AiPoolGameV2Args['tuple']['joinGame(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AiPoolGameV2ParamsFactory.joinGame(params))
    },

    /**
     * Makes a call to the AiPoolGameV2 smart contract using the `endGame(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    endGame: (params: CallParams<AiPoolGameV2Args['obj']['endGame(uint64)void'] | AiPoolGameV2Args['tuple']['endGame(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AiPoolGameV2ParamsFactory.endGame(params))
    },

    /**
     * Makes a call to the AiPoolGameV2 smart contract using the `resetGame()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    resetGame: (params: CallParams<AiPoolGameV2Args['obj']['resetGame()void'] | AiPoolGameV2Args['tuple']['resetGame()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AiPoolGameV2ParamsFactory.resetGame(params))
    },

    /**
     * Makes a call to the AiPoolGameV2 smart contract using the `emergencyWithdraw()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    emergencyWithdraw: (params: CallParams<AiPoolGameV2Args['obj']['emergencyWithdraw()void'] | AiPoolGameV2Args['tuple']['emergencyWithdraw()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AiPoolGameV2ParamsFactory.emergencyWithdraw(params))
    },

    /**
     * Makes a call to the AiPoolGameV2 smart contract using the `getTotalPool()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTotalPool: (params: CallParams<AiPoolGameV2Args['obj']['getTotalPool()uint64'] | AiPoolGameV2Args['tuple']['getTotalPool()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AiPoolGameV2ParamsFactory.getTotalPool(params))
    },

    /**
     * Makes a call to the AiPoolGameV2 smart contract using the `getGameStatus()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getGameStatus: (params: CallParams<AiPoolGameV2Args['obj']['getGameStatus()uint64'] | AiPoolGameV2Args['tuple']['getGameStatus()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AiPoolGameV2ParamsFactory.getGameStatus(params))
    },

    /**
     * Makes a call to the AiPoolGameV2 smart contract using the `getWinner()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getWinner: (params: CallParams<AiPoolGameV2Args['obj']['getWinner()uint64'] | AiPoolGameV2Args['tuple']['getWinner()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AiPoolGameV2ParamsFactory.getWinner(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the AiPoolGameV2 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the AiPoolGameV2 smart contract using the `fundPool(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    fundPool: async (params: CallParams<AiPoolGameV2Args['obj']['fundPool(uint64)void'] | AiPoolGameV2Args['tuple']['fundPool(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AiPoolGameV2ParamsFactory.fundPool(params))
      return {...result, return: result.return as unknown as (undefined | AiPoolGameV2Returns['fundPool(uint64)void'])}
    },

    /**
     * Makes a call to the AiPoolGameV2 smart contract using the `joinGame(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    joinGame: async (params: CallParams<AiPoolGameV2Args['obj']['joinGame(uint64,uint64)void'] | AiPoolGameV2Args['tuple']['joinGame(uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AiPoolGameV2ParamsFactory.joinGame(params))
      return {...result, return: result.return as unknown as (undefined | AiPoolGameV2Returns['joinGame(uint64,uint64)void'])}
    },

    /**
     * Makes a call to the AiPoolGameV2 smart contract using the `endGame(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    endGame: async (params: CallParams<AiPoolGameV2Args['obj']['endGame(uint64)void'] | AiPoolGameV2Args['tuple']['endGame(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AiPoolGameV2ParamsFactory.endGame(params))
      return {...result, return: result.return as unknown as (undefined | AiPoolGameV2Returns['endGame(uint64)void'])}
    },

    /**
     * Makes a call to the AiPoolGameV2 smart contract using the `resetGame()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    resetGame: async (params: CallParams<AiPoolGameV2Args['obj']['resetGame()void'] | AiPoolGameV2Args['tuple']['resetGame()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AiPoolGameV2ParamsFactory.resetGame(params))
      return {...result, return: result.return as unknown as (undefined | AiPoolGameV2Returns['resetGame()void'])}
    },

    /**
     * Makes a call to the AiPoolGameV2 smart contract using the `emergencyWithdraw()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    emergencyWithdraw: async (params: CallParams<AiPoolGameV2Args['obj']['emergencyWithdraw()void'] | AiPoolGameV2Args['tuple']['emergencyWithdraw()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AiPoolGameV2ParamsFactory.emergencyWithdraw(params))
      return {...result, return: result.return as unknown as (undefined | AiPoolGameV2Returns['emergencyWithdraw()void'])}
    },

    /**
     * Makes a call to the AiPoolGameV2 smart contract using the `getTotalPool()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTotalPool: async (params: CallParams<AiPoolGameV2Args['obj']['getTotalPool()uint64'] | AiPoolGameV2Args['tuple']['getTotalPool()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AiPoolGameV2ParamsFactory.getTotalPool(params))
      return {...result, return: result.return as unknown as (undefined | AiPoolGameV2Returns['getTotalPool()uint64'])}
    },

    /**
     * Makes a call to the AiPoolGameV2 smart contract using the `getGameStatus()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getGameStatus: async (params: CallParams<AiPoolGameV2Args['obj']['getGameStatus()uint64'] | AiPoolGameV2Args['tuple']['getGameStatus()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AiPoolGameV2ParamsFactory.getGameStatus(params))
      return {...result, return: result.return as unknown as (undefined | AiPoolGameV2Returns['getGameStatus()uint64'])}
    },

    /**
     * Makes a call to the AiPoolGameV2 smart contract using the `getWinner()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getWinner: async (params: CallParams<AiPoolGameV2Args['obj']['getWinner()uint64'] | AiPoolGameV2Args['tuple']['getWinner()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AiPoolGameV2ParamsFactory.getWinner(params))
      return {...result, return: result.return as unknown as (undefined | AiPoolGameV2Returns['getWinner()uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new AiPoolGameV2Client(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the AiPoolGameV2 smart contract using the `getTotalPool()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getTotalPool(params: CallParams<AiPoolGameV2Args['obj']['getTotalPool()uint64'] | AiPoolGameV2Args['tuple']['getTotalPool()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(AiPoolGameV2ParamsFactory.getTotalPool(params))
    return result.return as unknown as AiPoolGameV2Returns['getTotalPool()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the AiPoolGameV2 smart contract using the `getGameStatus()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getGameStatus(params: CallParams<AiPoolGameV2Args['obj']['getGameStatus()uint64'] | AiPoolGameV2Args['tuple']['getGameStatus()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(AiPoolGameV2ParamsFactory.getGameStatus(params))
    return result.return as unknown as AiPoolGameV2Returns['getGameStatus()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the AiPoolGameV2 smart contract using the `getWinner()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getWinner(params: CallParams<AiPoolGameV2Args['obj']['getWinner()uint64'] | AiPoolGameV2Args['tuple']['getWinner()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(AiPoolGameV2ParamsFactory.getWinner(params))
    return result.return as unknown as AiPoolGameV2Returns['getWinner()uint64']
  }

  /**
   * Methods to access state for the current AiPoolGameV2 app
   */
  state = {
    /**
     * Methods to access global state for the current AiPoolGameV2 app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          owner: result.owner,
          gameStatus: result.gameStatus,
          totalPool: result.totalPool,
          humanStake: result.humanStake,
          botCount: result.botCount,
          currentGamePool: result.currentGamePool,
          winner: result.winner,
        }
      },
      /**
       * Get the current value of the owner key in global state
       */
      owner: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("owner")) as string | undefined },
      /**
       * Get the current value of the gameStatus key in global state
       */
      gameStatus: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("gameStatus")) as bigint | undefined },
      /**
       * Get the current value of the totalPool key in global state
       */
      totalPool: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalPool")) as bigint | undefined },
      /**
       * Get the current value of the humanStake key in global state
       */
      humanStake: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("humanStake")) as bigint | undefined },
      /**
       * Get the current value of the botCount key in global state
       */
      botCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("botCount")) as bigint | undefined },
      /**
       * Get the current value of the currentGamePool key in global state
       */
      currentGamePool: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("currentGamePool")) as bigint | undefined },
      /**
       * Get the current value of the winner key in global state
       */
      winner: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("winner")) as bigint | undefined },
    },
  }

  public newGroup(): AiPoolGameV2Composer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a fundPool(uint64)void method call against the AiPoolGameV2 contract
       */
      fundPool(params: CallParams<AiPoolGameV2Args['obj']['fundPool(uint64)void'] | AiPoolGameV2Args['tuple']['fundPool(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.fundPool(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a joinGame(uint64,uint64)void method call against the AiPoolGameV2 contract
       */
      joinGame(params: CallParams<AiPoolGameV2Args['obj']['joinGame(uint64,uint64)void'] | AiPoolGameV2Args['tuple']['joinGame(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.joinGame(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a endGame(uint64)void method call against the AiPoolGameV2 contract
       */
      endGame(params: CallParams<AiPoolGameV2Args['obj']['endGame(uint64)void'] | AiPoolGameV2Args['tuple']['endGame(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.endGame(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a resetGame()void method call against the AiPoolGameV2 contract
       */
      resetGame(params: CallParams<AiPoolGameV2Args['obj']['resetGame()void'] | AiPoolGameV2Args['tuple']['resetGame()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.resetGame(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a emergencyWithdraw()void method call against the AiPoolGameV2 contract
       */
      emergencyWithdraw(params: CallParams<AiPoolGameV2Args['obj']['emergencyWithdraw()void'] | AiPoolGameV2Args['tuple']['emergencyWithdraw()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.emergencyWithdraw(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getTotalPool()uint64 method call against the AiPoolGameV2 contract
       */
      getTotalPool(params: CallParams<AiPoolGameV2Args['obj']['getTotalPool()uint64'] | AiPoolGameV2Args['tuple']['getTotalPool()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTotalPool(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTotalPool()uint64', v))
        return this
      },
      /**
       * Add a getGameStatus()uint64 method call against the AiPoolGameV2 contract
       */
      getGameStatus(params: CallParams<AiPoolGameV2Args['obj']['getGameStatus()uint64'] | AiPoolGameV2Args['tuple']['getGameStatus()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getGameStatus(params)))
        resultMappers.push((v) => client.decodeReturnValue('getGameStatus()uint64', v))
        return this
      },
      /**
       * Add a getWinner()uint64 method call against the AiPoolGameV2 contract
       */
      getWinner(params: CallParams<AiPoolGameV2Args['obj']['getWinner()uint64'] | AiPoolGameV2Args['tuple']['getWinner()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getWinner(params)))
        resultMappers.push((v) => client.decodeReturnValue('getWinner()uint64', v))
        return this
      },
      /**
       * Add a clear state call to the AiPoolGameV2 contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as AiPoolGameV2Composer
  }
}
export type AiPoolGameV2Composer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the fundPool(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  fundPool(params?: CallParams<AiPoolGameV2Args['obj']['fundPool(uint64)void'] | AiPoolGameV2Args['tuple']['fundPool(uint64)void']>): AiPoolGameV2Composer<[...TReturns, AiPoolGameV2Returns['fundPool(uint64)void'] | undefined]>

  /**
   * Calls the joinGame(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  joinGame(params?: CallParams<AiPoolGameV2Args['obj']['joinGame(uint64,uint64)void'] | AiPoolGameV2Args['tuple']['joinGame(uint64,uint64)void']>): AiPoolGameV2Composer<[...TReturns, AiPoolGameV2Returns['joinGame(uint64,uint64)void'] | undefined]>

  /**
   * Calls the endGame(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  endGame(params?: CallParams<AiPoolGameV2Args['obj']['endGame(uint64)void'] | AiPoolGameV2Args['tuple']['endGame(uint64)void']>): AiPoolGameV2Composer<[...TReturns, AiPoolGameV2Returns['endGame(uint64)void'] | undefined]>

  /**
   * Calls the resetGame()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  resetGame(params?: CallParams<AiPoolGameV2Args['obj']['resetGame()void'] | AiPoolGameV2Args['tuple']['resetGame()void']>): AiPoolGameV2Composer<[...TReturns, AiPoolGameV2Returns['resetGame()void'] | undefined]>

  /**
   * Calls the emergencyWithdraw()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  emergencyWithdraw(params?: CallParams<AiPoolGameV2Args['obj']['emergencyWithdraw()void'] | AiPoolGameV2Args['tuple']['emergencyWithdraw()void']>): AiPoolGameV2Composer<[...TReturns, AiPoolGameV2Returns['emergencyWithdraw()void'] | undefined]>

  /**
   * Calls the getTotalPool()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTotalPool(params?: CallParams<AiPoolGameV2Args['obj']['getTotalPool()uint64'] | AiPoolGameV2Args['tuple']['getTotalPool()uint64']>): AiPoolGameV2Composer<[...TReturns, AiPoolGameV2Returns['getTotalPool()uint64'] | undefined]>

  /**
   * Calls the getGameStatus()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getGameStatus(params?: CallParams<AiPoolGameV2Args['obj']['getGameStatus()uint64'] | AiPoolGameV2Args['tuple']['getGameStatus()uint64']>): AiPoolGameV2Composer<[...TReturns, AiPoolGameV2Returns['getGameStatus()uint64'] | undefined]>

  /**
   * Calls the getWinner()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getWinner(params?: CallParams<AiPoolGameV2Args['obj']['getWinner()uint64'] | AiPoolGameV2Args['tuple']['getWinner()uint64']>): AiPoolGameV2Composer<[...TReturns, AiPoolGameV2Returns['getWinner()uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the AiPoolGameV2 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): AiPoolGameV2Composer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): AiPoolGameV2Composer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AiPoolGameV2ComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<AiPoolGameV2ComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<AiPoolGameV2ComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<AiPoolGameV2ComposerResults<TReturns>>
}
export type AiPoolGameV2ComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

